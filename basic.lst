00008040 basic_buffer               00008080 variables                  
000080C0 program_start              00009F00 memory_limit               
00009EC0 start_for                  00009F00 end_for                    
00009E80 start_gosub                00009EC0 end_gosub                  
00009E40 bas_strings                00000100 TOKEN_START                
00000100 TOKEN_COLON                00000108 TOKEN_GOTO                 
00000109 TOKEN_IF                   0000010A TOKEN_THEN                 
0000010B TOKEN_ELSE                 0000010D TOKEN_TO                   
0000010E TOKEN_STEP                 00000115 TOKEN_DATA                 
0000011E TOKEN_AND                  0000011F TOKEN_NOT                  
00000120 TOKEN_OR                   00000121 TOKEN_XOR                  
00000122 TOKEN_LE                   00000123 TOKEN_GE                   
00000124 TOKEN_NE                   00000125 TOKEN_EQ                   
00000126 TOKEN_LT                   00000127 TOKEN_GT                   
00000128 TOKEN_FUNC                 00000128 TOKEN_INT                  
00000129 TOKEN_ABS                  0000012A TOKEN_SGN                  
0000012B TOKEN_RND                  0000012C TOKEN_STICK                
0000012D TOKEN_STRIG                0000012E TOKEN_KEY                  
0000012F TOKEN_BK                   00000000 ERR_TITLE                  
00000001 ERR_SYNTAX                 00000002 ERR_STOP                   
00000003 ERR_LINE                   00000004 ERR_GOSUB                  
00000005 ERR_RETURN                 00000006 ERR_FOR                    
00000007 ERR_NEXT                   00000008 ERR_DATA                   
00000009 ERR_DIM                    0000000A ERR_MEMORY                 
0000000B ERR_ARRAY                  0000000C ERR_BOUNDS                 
0000001C KEY.LEFT                   0000001D KEY.RIGHT                  
0000001E KEY.UP                     0000001F KEY.DOWN                   
0000000A KEY.ENTER                  0000001B KEY.ESC                    
000000FF KEY.NONE                   0000000D BAS_CR                     
0000000A BAS_LF                     0000001C BAS_BS                     
000002F0 STACK                      0000500D _ZERO                      
0000503F _MAIN                      0000500F _ONES                      
0000502B _TITLE                     00005014 CLRSCR                     
00005018 FILLZERO                   00005019 MEMSET                     
00006095 _set_isr                   00005060 _pal1                      
00005067 _pal2                      0000507E _pal3                      
00005071 _pal2_lp                   0000507B _pal2_cnt                  
0000509A _ecs1                      00000103 _ntsc                      
00000104 _mode                      00000347 _mode_color                
0000609C _int_vector                00000105 _border_color              
0000033C bas_curcolor               00005557 bas_new                    
00005560 bas_cls                    0000033E bas_curline                
000053BB bas_error                  000050C8 basic_restart              
00005EC6 bas_output                 0000033B bas_ttypos                 
0000033A bas_firstpos               00005509 bas_list                   
000050F1 main_loop                  00005EA2 bas_save_cursor            
000050F4 @@0                        00005EA8 bas_blink_cursor           
00005FFB SCAN_KBD                   00005EC0 bas_restore_cursor         
00005148 @@1                        000053FF bas_tokenize               
00005124 @@2                        000054B9 bas_execute_line           
00005142 @@3                        00005366 line_search                
0000512F @@4                        0000537B line_delete                
00005392 line_insert                0000514D keywords_exec              
00005570 bas_run                    00005591 bas_stop                   
00005596 bas_print                  000055E1 bas_input                  
00005635 bas_goto                   0000566A bas_if                     
00005B7B bas_syntax_error           00005721 bas_for                    
0000577D bas_next                   000057FE bas_gosub                  
00005847 bas_return                 0000585E bas_rem                    
00005878 bas_restore                000058C1 bas_read                   
0000592C bas_data                   00005936 bas_dim                    
00005998 bas_mode                   000059B6 bas_color                  
000059BD bas_define                 00005A30 bas_sprite                 
00005A92 bas_wait                   00005A9C bas_sound                  
00005B46 bas_border                 00005B56 bas_bk                     
0000517D keywords                   00005258 at_line                    
0000525D errors                     00005321 bas_get_line               
00005324 bas_get_line.2             00005328 bas_get_line.0             
00005357 bas_get_line.1             0000534F bas_get_line.3             
00000345 program_end                00005377 line_search.1              
0000536C line_search.0              00005379 line_search.3              
00005378 line_search.2              0000538C line_delete.1              
000053A1 line_insert.1              000053AF line_insert.2              
000053B5 get_next                   000053C7 bas_error.2                
000053C0 bas_error.1                000053D2 bas_error.3                
000053ED bas_error.4                000053DD bas_error.5                
000053E8 bas_error.6                0000605F PRNUM16.l                  
000053F9 bas_read_card              0000540C bas_tokenize.1             
000054B8 bas_tokenize.0             00005416 bas_tokenize.2             
0000542F bas_tokenize.3             0000542E bas_tokenize.19            
0000543F bas_tokenize.4             00005435 bas_tokenize.6             
000054A5 bas_tokenize.5             00005458 bas_tokenize.14            
00005443 bas_tokenize.15            0000548E bas_tokenize.20            
00005461 bas_tokenize.8             00005462 bas_tokenize.11            
00005471 bas_tokenize.9             00005480 bas_tokenize.10            
0000549C bas_tokenize.16            0000548B bas_tokenize.7             
0000549A bas_tokenize.18            000054B0 bas_tokenize.17            
000054BA bas_execute_line.0         000054E2 bas_execute_line.3         
000054C1 bas_execute_line.2         000054E3 bas_execute                
000054DC bas_execute_line.1         000054E4 bas_execute.0              
00005504 bas_execute.2              000056CB get_var_addr               
000054FF bas_execute.1              00005B8A bas_expr                   
0000550D bas_list.1                 00005555 bas_list.2                 
0000551C bas_list.4                 00005547 bas_list.3                 
0000552B bas_list.5                 00005538 bas_list.6                 
00005531 bas_list.7                 00005539 bas_list.8                 
00005544 bas_list.9                 00005569 bas_cls.1                  
0000033F bas_forptr                 00000340 bas_gosubptr               
00000344 bas_memlimit               00005864 data_locate                
00000341 bas_dataptr                00000342 bas_arrays                 
00000343 bas_last_array             0000558C bas_run.1                  
00005597 bas_print.3                0000559A bas_print.5                
000055C0 bas_print.6                000055B5 bas_print.2                
000055A9 bas_print.1                000055CE bas_print.4                
000063BC fpprint                    000055E2 bas_input.3                
000055E5 bas_input.5                0000562F bas_input.6                
0000560A bas_input.4                000055F4 bas_input.1                
00005600 bas_input.2                0000563A bas_goto.1                 
0000564C bas_goto.2                 00005658 bas_goto.3                 
00005666 bas_goto.4                 00005693 bas_if.1                   
0000568C bas_if.2                   00005688 bas_if.3                   
00005694 bas_if.6                   000056AB bas_if.4                   
000056A1 bas_if.5                   000056AD get_next_point             
000056B0 get_next_point.2           000056BE get_next_point.1           
000056CA get_next_point.3           000056C5 get_next_point.4           
00005712 get_var_addr.1             000056D3 get_var_addr.0             
0000570A get_var_addr.2             00006344 fp2uint                    
000056F1 get_var_addr.3             00005717 get_var_addr.5             
000056FF get_var_addr.4             0000571C get_var_addr.6             
00005772 bas_for.1                  00005777 bas_for.2                  
0000575E bas_for.3                  00005761 bas_for.4                  
00005789 bas_next.1                 00005784 bas_next.0                 
000057A4 bas_next.2                 00005799 bas_next.3                 
000057AC bas_next.4                 000057C1 bas_next.5                 
000057C4 bas_next.6                 0000010B temp1                      
0000614F fpadd                      000057E6 bas_next.7                 
00006268 fpcomp                     000057ED bas_next.8                 
000057F6 bas_next.9                 00005803 bas_gosub.1                
00005815 bas_gosub.2                00005842 bas_gosub.5                
0000582F bas_gosub.3                0000583D bas_gosub.4                
00005853 bas_return.1               0000585E bas_rem.1                  
00005867 data_locate.3              00005876 data_locate.1              
0000586C data_locate.2              000058AA bas_restore.1              
00005885 bas_restore.4              00005895 bas_restore.3              
000058BC bas_restore.5              000058A0 bas_restore.7              
000058B7 bas_restore.6              000058B3 bas_restore.2              
000058C2 bas_read.12                00005926 bas_read.2                 
00005921 bas_read.6                 000058D7 bas_read.8                 
00005910 bas_read.5                 000058EF bas_read.3                 
00005910 bas_read.4                 00005E75 parse_number               
000058F5 bas_read.11                00005903 bas_read.9                 
00005904 bas_read.10                00005915 bas_read.7                 
0000592C bas_data.1                 00005934 bas_data.2                 
00005993 bas_dim.1                  00005E5E parse_integer              
00005966 bas_dim.5                  00005974 bas_dim.4                  
0000598E bas_dim.2                  00005989 bas_dim.3                  
00005B80 bas_expr_int               000059B1 bas_mode.1                 
000059AF bas_mode.2                 00005A08 bas_define.1               
000059D3 bas_define.0               00005A0D bas_define.convert_hex     
000059F5 bas_define.2               00000108 _gram_total                
00000348 _gram_bitmap               00000107 _gram_target               
00005A14 bas_define.c1              00005A2E bas_define.c2              
00005A24 bas_define.c3              00005A2C bas_define.c4              
00005A88 bas_sprite.1               00000322 _mobs                      
00005A8D bas_sprite.2               00005A5E bas_sprite.4               
00005A85 bas_sprite.3               00005A7C bas_sprite.5               
00005A93 bas_wait.1                 00000102 _int                       
00005AC5 bas_sound.5                00005AB0 bas_sound.12               
00005ACA bas_sound.0                00005AE3 bas_sound.1                
00005AFC bas_sound.2                00005B15 bas_sound.3                
00005B2E bas_sound.4                00005ADD bas_sound.6                
00005B44 bas_sound.11               00005AF6 bas_sound.7                
00005B0F bas_sound.8                00005B28 bas_sound.9                
00005B3E bas_sound.10               00005B51 bas_border.1               
00005D13 bas_expr_paren             00006322 fp2int                     
00005B71 bas_bk.1                   00005B76 bas_bk.2                   
00005BB0 bas_expr1                  00005BAE bas_expr.1                 
00006285 fpfromint                  00005BD3 bas_expr2                  
00005BD1 bas_expr1.1                00005BF6 bas_expr3                  
00005BF4 bas_expr2.1                00005C86 bas_expr4                  
00005C7D bas_expr3.1                00005C1B bas_expr3.2                
00005C7F bas_expr3.true             00005C83 bas_expr3.false            
00005C2F bas_expr3.3                00005C43 bas_expr3.4                
00005C57 bas_expr3.5                00005C6B bas_expr3.6                
00005CB7 bas_expr5                  00005C8A bas_expr4.0                
00005CA1 bas_expr4.1                00005CB5 bas_expr4.2                
0000614D fpsub                      00005CE8 bas_expr6                  
00005CBB bas_expr5.0                00005CD2 bas_expr5.1                
000061DA fpmul                      00005CE6 bas_expr5.2                
00006212 fpdiv                      00005CFB bas_expr6.1                
00005D2D bas_expr7                  00006364 fpneg                      
00005D0E bas_expr6.2                00005D28 bas_expr_paren.1           
00005E25 bas_expr7.6                00005D3D bas_expr7.0                
00005D4D bas_expr7.INT              00005D5F bas_expr7.ABS              
00005D56 bas_expr7.SGN              00005D45 bas_expr7.RND              
00005D68 bas_expr7.STICK            00005DB5 bas_expr7.STRIG            
00005DE0 bas_expr7.KEY              00005E11 bas_expr7.BK               
00006392 fprnd                      000062B4 fpint                      
00006367 fpsgn                      00006361 fpabs                      
00005E59 bas_expr7.3                00005D8A bas_expr7.7                
00005D95 bas_expr7.TABLE            00005DDA bas_expr7.4                
00005E05 bas_expr7.KEYS             00005DF3 bas_expr7.9                
00005DFF bas_expr7.8                00005E34 bas_expr7.5                
00005E54 bas_expr7.2                00005E42 bas_expr7.1                
00005E4E bas_expr7.11               00005E60 parse_integer.1            
00005E67 parse_integer.2            00005E72 parse_integer.3            
00005E7F parse_number.1             00005E87 parse_number.2             
00005E80 parse_number.4             00005E92 parse_number.3             
000062A0 fpfromuint                 00005EA0 parse_number.5             
0000033D bas_card                   00005EA8 bas_blink_cursor.0         
00000319 _frame                     00005EBC bas_blink_cursor.1         
00005EE3 bas_output.0               00005EFA bas_output.5               
00005F09 bas_output.3               00005F1B bas_output.7               
00005F25 bas_output.10              00005F2F bas_output.12              
00005F3A bas_output.15              00005EF7 bas_output.1               
00005F45 bas_output.scroll          00005F00 bas_output.6               
00005F18 bas_output.4               00005F22 bas_output.8               
00005F2C bas_output.11              00005F37 bas_output.14              
00005F42 bas_output.16              00005F4C bas_output.2               
00005F5B bas_output.9               00005F6A bas_output.17              
00005F6B KBD_DECODE                 00005F6B KBD_DECODE.no_mods         
00005F9B KBD_DECODE.shifted         00005FCB KBD_DECODE.control         
0000601D SCAN_KBD.have_shift        0000601F SCAN_KBD.done_shift_ctrl   
00006022 SCAN_KBD.col               00006035 SCAN_KBD.maybe_key         
0000602A SCAN_KBD.cont_col          00006052 SCAN_KBD.none              
0000604A SCAN_KBD.got_key           00006049 SCAN_KBD.got_key1          
0000010A ECS_KEY_LAST               00006058 SCAN_KBD.new               
0000605F PRNUM16                    0000607C PRNUM16.d                  
0000607F PRNUM16.1                  0000608C PRNUM16.2                  
00006093 PRNUM16.3                  00000100 ISRVEC                     
000060AB _int_vector.1              000060BD _int_vector.2              
000060BD _int_vector.0              00000106 _border_mask               
0000031A _col0                      00006138 _int_vector.vi1            
00006123 _int_vector.vi3            00000109 _debounce                  
00006145 _int_vector.3              00000346 lfsr                       
00000317 fptemp1                    00000318 fptemp2                    
0000003F FPEXP_BIAS                 00006159 fpadd.1                    
000061D9 fpadd.2                    00006168 fpadd.4                    
00006182 fpadd.3                    0000617C fpadd.5                    
000061A3 fpadd.6                    000061A6 fpadd.8                    
000061AC fpadd.11                   000061C5 fpadd.12                   
000061BF fpadd.14                   000061C1 fpadd.9                    
000061CA fpadd.10                   000061D4 fpadd.7                    
000061E5 fpmul.1                    000061E8 fpmul.3                    
000061FF fpmul.4                    00006205 fpmul.5                    
00006238 fpdiv.2                    00006248 fpdiv.3                    
00006240 fpdiv.4                    0000625E fpdiv.5                    
00006265 fpdiv.6                    00006284 fpcomp.1                   
0000628C fpfromint.1                0000629F fpfromint.2                
00006293 fpfromint.3                00006294 fpfromint.4                
000062A7 fpfromuint.1               000062B3 fpfromuint.2               
000062D2 fpint.2                    000062C6 fpint.3                    
000062CE fpint.5                    000062C8 fpint.4                    
000062D3 fpceil                     000062DF fpfloor.0                  
000062DA fpfloor                    00006321 fpfloor.2                  
000062F0 fpfloor.3                  000062FE fpfloor.4                  
00006304 fpfloor.5                  00006310 fpfloor.6                  
00006319 fpfloor.7                  0000633E fp2int.2                   
00006333 fp2int.1                   0000633A fp2int.4                   
00006343 fp2int.3                   00006360 fp2uint.2                  
00006355 fp2uint.1                  0000635C fp2uint.4                  
0000636F fpsgn.1                    00006377 fpsgn.2                    
0000637A fpdivby2                   00006382 fpdivby2.1                 
00006383 fpmulby2                   00006390 fpmulby2.1                 
0000639A fprnd.1                    000063A4 fprnd.3                    
000063AB fprnd.4                    000063B2 fprnd.5                    
000063CD fpprint.14                 000063D8 fpprint.7                  
000064B7 fpprint.1                  00006485 fpprint.2                  
00006412 fpprint.5                  0000640C fpprint.6                  
00006532 fpprint.digit              000064E8 fpprint.0                  
00006457 fpprint.3                  0000644F fpprint.4                  
00006470 fpprint.8                  0000648C fpprint.9                  
000064E9 fpprint.exponent           000064BE fpprint.10                 
000064FE fpprint.11                 000064F8 fpprint.12                 
00006535 fpprint.d1                 00006546 fpprint.d2                 
00006555 fpprint.d3                 0000031B _col1                      
0000031C _col2                      0000031D _col3                      
0000031E _col4                      0000031F _col5                      
00000320 _col6                      00000321 _col7                      
00000100 SCRATCH                    
                                	;
                                	; ECS Extended BASIC interpreter for Intellivision
                                	;
                                	; by Oscar Toledo G.
                                	; https://nanochess.org/
                                	;
                                	; Creation date: Sep/19/2025.
                                	; Revision date: Sep/22/2025. Routines for adding/deleting/inserting lines, converting and
                                	;                             listing tokenized BASIC, and executing BASIC lines. Added
                                	;            	              LIST, NEW, CLS, RUN, STOP, PRINT, and GOTO. Execution can
                                	;                             be interrupted using the Esc key.
                                	; Revision date: Sep/23/2025. Added INPUT statement. Solved bug checking for Esc in GOTO.
                                	; Revision date: Sep/24/2025. Added ELSE statement. Added GOSUB/RETURN. Added FOR/NEXT.
                                	;                             Added negation operator. Added functions INT, ABS, SGN, and
                                	;                             RND. Added REM, RESTORE, READ, and DATA.
                                	; Revision date: Sep/26/2025. Added arrays with DIM.
                                	; Revision date: Sep/27/2025. Added AND, XOR, OR, and NOT. Implemented COLOR, WAIT,
                                	;                             SPRITE, SOUND, STICK, STRIG, KEY, BK, MODE, BORDER, and
                                	;                             DEFINE. Corrections for working in real hardware. Added
                                	;                             keyboard debouncing.
                                	;

                                	ROMW 16
0x5000                          	ORG $5000

                                	CFGVAR "jlp" = 1	; Enable JLP RAM on real hardware.

0x8040                          basic_buffer:	EQU $8040
0x8080                          variables:	EQU $8080
0x80C0                          program_start:	EQU $80C0
0x9F00                          memory_limit:	EQU $9F00
0x9EC0                          start_for:	EQU memory_limit-64
0x9F00                          end_for:	EQU memory_limit
0x9E80                          start_gosub:	EQU memory_limit-128
0x9EC0                          end_gosub:	EQU memory_limit-64
0x9E40                          bas_strings:	EQU memory_limit-192
0x100                           TOKEN_START:	EQU $0100
0x100                           TOKEN_COLON:	EQU $0100
0x108                           TOKEN_GOTO:	EQU $0108
0x109                           TOKEN_IF:	EQU $0109
0x10A                           TOKEN_THEN:	EQU $010a
0x10B                           TOKEN_ELSE:	EQU $010b
0x10D                           TOKEN_TO:	EQU $010d
0x10E                           TOKEN_STEP:	EQU $010e

0x115                           TOKEN_DATA:	EQU $0115

0x11E                           TOKEN_AND:	EQU $011e
0x11F                           TOKEN_NOT:	EQU $011f
0x120                           TOKEN_OR:	EQU $0120
0x121                           TOKEN_XOR:	EQU $0121

0x122                           TOKEN_LE:	EQU $0122
0x123                           TOKEN_GE:	EQU $0123
0x124                           TOKEN_NE:	EQU $0124
0x125                           TOKEN_EQ:	EQU $0125
0x126                           TOKEN_LT:	EQU $0126
0x127                           TOKEN_GT:	EQU $0127

0x128                           TOKEN_FUNC:	EQU $0128
0x128                           TOKEN_INT:	EQU $0128
0x129                           TOKEN_ABS:	EQU $0129
0x12A                           TOKEN_SGN:	EQU $012a
0x12B                           TOKEN_RND:	EQU $012b
0x12C                           TOKEN_STICK:	EQU $012c
0x12D                           TOKEN_STRIG:	EQU $012d
0x12E                           TOKEN_KEY:	EQU $012e
0x12F                           TOKEN_BK:	EQU $012f

0x0                             ERR_TITLE:	EQU 0
0x1                             ERR_SYNTAX:	EQU 1
0x2                             ERR_STOP:	EQU 2
0x3                             ERR_LINE:	EQU 3
0x4                             ERR_GOSUB:	EQU 4
0x5                             ERR_RETURN:	EQU 5
0x6                             ERR_FOR:	EQU 6
0x7                             ERR_NEXT:	EQU 7
0x8                             ERR_DATA:	EQU 8
0x9                             ERR_DIM:	EQU 9
0xA                             ERR_MEMORY:	EQU 10
0xB                             ERR_ARRAY:	EQU 11
0xC                             ERR_BOUNDS:	EQU 12

0x1C                            KEY.LEFT    EQU     $1C     ; \   Can't be generated otherwise, so perfect
0x1D                            KEY.RIGHT   EQU     $1D     ;  |_ candidates.  Could alternately send 8 for
0x1E                            KEY.UP      EQU     $1E     ;  |  left... not sure...
0x1F                            KEY.DOWN    EQU     $1F     ; /   
0xA                             KEY.ENTER   EQU     $A      ; Newline
0x1B                            KEY.ESC     EQU     27
0xFF                            KEY.NONE    EQU     $FF

0xD                             BAS_CR:	EQU $0d
0xA                             BAS_LF:	EQU $0a
0x1C                            BAS_BS:	EQU $1C		; Same as KEY.LEFT

0x2F0                           STACK:		equ $02f0	; Base stack pointer.

                                	;
                                	; ROM header
                                	;
5000   000D 0050                	BIDECLE _ZERO		; MOB picture base
5002   000D 0050                	BIDECLE _ZERO		; Process table
5004   003F 0050                	BIDECLE _MAIN		; Program start
5006   000D 0050                	BIDECLE _ZERO		; Background base image
5008   000F 0050                	BIDECLE _ONES		; GRAM
500A   002B 0050                	BIDECLE _TITLE		; Cartridge title and date
500C   03C0                     	DECLE   $03C0		; No ECS title, jump to code after title,
                                				; ... no clicks
                                                                
500D   0000                     _ZERO:	DECLE   $0000		; Border control
500E   0000                     	DECLE   $0000		; 0 = color stack, 1 = f/b mode
                                        
500F   0001 0001                _ONES:	DECLE   $0001, $0001	; Initial color stack 0 and 1: Blue
5011   0001 0001                	DECLE   $0001, $0001	; Initial color stack 2 and 3: Blue
5013   0001                     	DECLE   $0001		; Initial border color: Blue

5014   02BC 0200                CLRSCR:	MVII #$200,R4		; Used also for CLS
5016   02B9 00F0                	MVII #$F0,R1
0x5018                          FILLZERO:
5018   01C0                     	CLRR R0
0x5019                          MEMSET:
5019   007D                     	SARC R1,2
501A   020A 0002                	BNOV $+4
501C   0260                     	MVO@ R0,R4
501D   0260                     	MVO@ R0,R4
501E   0209 0001                	BNC $+3
5020   0260                     	MVO@ R0,R4
5021   0204 0005                	BEQ $+7
5023   0260                     	MVO@ R0,R4
5024   0260                     	MVO@ R0,R4
5025   0260                     	MVO@ R0,R4
5026   0260                     	MVO@ R0,R4
5027   0011                     	DECR R1
5028   022C 0006                	BNE $-5
502A   00AF                     	JR R5

                                	;
                                	; Title, Intellivision EXEC will jump over it and start
                                	; execution directly in _MAIN
                                	;
                                	; Note mark is for automatic replacement by IntyBASIC
0x502B                          _TITLE:
502B   007D 0045 0043 0053              BYTE 125, 'ECS Extended BASIC', 0 
502F   0020 0045 0078 0074 0065 006E 0064 0065 
5037   0064 0020 0042 0041 0053 0049 0043 0000 
                                        
                                	;
                                	; Main program
                                	;
0x503F                          _MAIN:
503F   0003                     	DIS			; Disable interrupts
5040   02BE 02F0                	MVII #STACK,R6

                                	;
                                	; Clean memory
                                	;
5042   0004 0150 0014           	CALL CLRSCR		; Clean up screen, right here to avoid brief
                                				; screen display of title in Sears Intellivision.
5045   02B9 000E                	MVII #$00e,R1		; 14 of sound (ECS)
5047   02BC 00F0                	MVII #$0f0,R4		; ECS PSG
5049   0004 0150 0018           	CALL FILLZERO
504C   02B9 00FE                	MVII #$0fe,R1		; 240 words of 8 bits plus 14 of sound
504E   02BC 0100                	MVII #$100,R4		; 8-bit scratch RAM
5050   0004 0150 0018           	CALL FILLZERO

                                	; Seed random generator using 16 bit RAM (not cleared by EXEC)
                                ;	CLRR R0
                                ;	MVII #$02F0,R4
                                ;	MVII #$0110/4,R1	; Includes phantom memory for extra randomness
                                ;_MAIN4:				; This loop is courtesy of GroovyBee
                                ;	ADD@ R4,R0
                                ;	ADD@ R4,R0
                                ;	ADD@ R4,R0
                                ;	ADD@ R4,R0
                                ;	DECR R1
                                ;	BNE _MAIN4
                                ;	MVO R0,_rand

5053   02B9 0058                	MVII #$058,R1		; 88 words of 16 bits
5055   02BC 0308                	MVII #$308,R4		; 16-bit scratch RAM
5057   0004 0150 0018           	CALL FILLZERO

                                	; PAL/NTSC detect
505A   0004 0160 0095           	CALL _set_isr
505D   5060                     	DECLE _pal1
505E   0002                     	EIS
505F   0017                     	DECR PC			; This is a kind of HALT instruction

                                	; First interrupt may come at a weird time on Tutorvision, or
                                	; if other startup timing changes.
5060   033E 0008                _pal1:	SUBI #8,R6		; Drop interrupt stack.
5062   0004 0160 0095           	CALL _set_isr
5065   5067                     	DECLE _pal2
5066   0017                     	DECR PC

                                	; Second interrupt is safe for initializing MOBs.
                                	; We will know the screen is off after this one fires.
5067   033E 0008                _pal2:	SUBI #8,R6		; Drop interrupt stack.
5069   0004 0160 0095           	CALL _set_isr
506C   507E                     	DECLE _pal3
                                	; clear MOBs
506D   01C0                     	CLRR R0
506E   01E4                     	CLRR R4
506F   02BA 0018                	MVII #$18,R2
0x5071                          _pal2_lp:
5071   0260                     	MVO@ R0,R4
5072   0012                     	DECR R2
5073   022C 0003                	BNE _pal2_lp
5075   0240 0030                	MVO R0,$30		; Reset horizontal delay register
5077   0240 0031                	MVO R0,$31		; Reset vertical delay register

5079   02BA FBB4                	MVII #-1100,R2		; PAL/NTSC threshold
0x507B                          _pal2_cnt:
507B   000A                     	INCR R2
507C   0220 0002                	B _pal2_cnt

                                	; The final count in R2 will either be negative or positive.
                                	; If R2 is still -ve, NTSC; else PAL.
507E   033E 0008                _pal3:	SUBI #8,R6		; Drop interrupt stack.
5080   0052                     	RLC R2,1
5081   0052                     	RLC R2,1
5082   03BA 0001                	ANDI #1,R2		; 1 = NTSC, 0 = PAL

5084   02B9 0055                	MVII #$55,R1
5086   0241 4040                	MVO R1,$4040
5088   02B9 00AA                	MVII #$AA,R1
508A   0241 4041                	MVO R1,$4041
508C   0281 4040                	MVI $4040,R1
508E   0379 0055                	CMPI #$55,R1
5090   020C 0008                	BNE _ecs1
5092   0281 4041                	MVI $4041,R1
5094   0379 00AA                	CMPI #$AA,R1
5096   020C 0002                	BNE _ecs1
5098   02FA 0002                	ADDI #2,R2		; ECS detected flag
0x509A                          _ecs1:
509A   0242 0103                	MVO R2,_ntsc	

509C   01C0                     	CLRR R0
509D   0240 0104                	MVO R0,_mode
509F   02B8 1111                	MVII #$1111,R0
50A1   0240 0347                	MVO R0,_mode_color

50A3   0004 0160 0095           	CALL _set_isr
50A6   609C                     	DECLE _int_vector

50A7   01C0                     	CLRR R0
50A8   0240 01FB                	MVO R0,$01fb
50AA   0240 01FC                	MVO R0,$01fc
50AC   0240 01FD                	MVO R0,$01fd
50AE   02B8 0038                	MVII #$38,R0
50B0   0240 01F8                	MVO R0,$01f8

50B2   02B8 0001                	MVII #1,R0
50B4   0240 0105                	MVO R0,_border_color
50B6   02B8 0007                	MVII #$07,R0
50B8   0240 033C                	MVO R0,bas_curcolor

50BA   0004 0154 0157           	CALL bas_new
50BD   0004 0154 0160           	CALL bas_cls
50C0   01C0                     	CLRR R0
50C1   0240 033E                	MVO R0,bas_curline
50C3   02B8 0000                	MVII #ERR_TITLE,R0
50C5   0004 0150 03BB           	CALL bas_error
0x50C8                          basic_restart:
50C8   02BE 02F0                	MVII #STACK,R6
50CA   02B8 0052                	MVII #$52,R0
50CC   0004 015C 02C6           	CALL bas_output
50CF   02B8 0045                	MVII #$45,R0
50D1   0004 015C 02C6           	CALL bas_output
50D4   02B8 0041                	MVII #$41,R0
50D6   0004 015C 02C6           	CALL bas_output
50D9   02B8 0044                	MVII #$44,R0
50DB   0004 015C 02C6           	CALL bas_output
50DE   02B8 0059                	MVII #$59,R0
50E0   0004 015C 02C6           	CALL bas_output
50E3   02B8 000D                	MVII #$0d,R0
50E5   0004 015C 02C6           	CALL bas_output
50E8   02B8 000A                	MVII #$0a,R0
50EA   0004 015C 02C6           	CALL bas_output

50ED   0280 033B                	MVI bas_ttypos,R0
50EF   0240 033A                	MVO R0,bas_firstpos
                                	; Build an example program
                                    IF 0
                                	MVII #program_start,R4
                                	MVII #10,R0
                                	MVO@ R0,R4
                                	MVII #2,R0
                                	MVO@ R0,R4
                                	MVII #$0102,R0	; CLS Currently
                                	MVO@ R0,R4
                                	CLRR R0
                                	MVO@ R0,R4
                                	CLRR R0
                                	MVO@ R0,R4
                                	CALL bas_list
                                    ENDI

0x50F1                          main_loop:
50F1   0004 015C 02A2           	CALL bas_save_cursor
0x50F4                          @@0:
50F4   0004 015C 02A8           	CALL bas_blink_cursor
50F7   0004 015C 03FB           	CALL SCAN_KBD
50FA   0378 00FF                	CMPI #KEY.NONE,R0
50FC   0224 0009                	BEQ @@0
50FE   0004 015C 02C0           	CALL bas_restore_cursor
5101   0378 000A                	CMPI #KEY.ENTER,R0
5103   020C 0043                	BNE @@1
5105   02B8 000D                	MVII #BAS_CR,R0
5107   0004 015C 02C6           	CALL bas_output
510A   02B8 000A                	MVII #BAS_LF,R0
510C   0004 015C 02C6           	CALL bas_output
510F   0284 033A                	MVI bas_firstpos,R4
5111   0004 0150 03FF           	CALL bas_tokenize
5114   0280 8040                	MVI basic_buffer+0,R0
5116   0080                     	TSTR R0		; Line number found?
5117   020C 000B                	BNE @@2		; Yes, jump.
5119   02BC 8040                	MVII #basic_buffer,R4
511B   02B8 FFFF                	MVII #$FFFF,R0	; So it is executed.
511D   0260                     	MVO@ R0,R4
511E   0014                     	DECR R4
511F   0004 0154 00B9           	CALL bas_execute_line
5122   0200 001E                	B @@3

5124   0280 8040                @@2:	MVI basic_buffer+0,R0
5126   0004 0150 0366           	CALL line_search
5129   0148                     	CMPR R1,R0
512A   020C 0003                	BNE @@4		; Jump if not found.
512C   0004 0150 037B           	CALL line_delete
512F   0280 8042                @@4:	MVI basic_buffer+2,R0
5131   0080                     	TSTR R0
5132   0204 000E                	BEQ @@3
5134   0280 8040                	MVI basic_buffer+0,R0
5136   0004 0150 0366           	CALL line_search
5139   0281 8040                	MVI basic_buffer+0,R1
513B   0283 8041                	MVI basic_buffer+1,R3
513D   02BA 8042                	MVII #basic_buffer+2,R2
513F   0004 0150 0392           	CALL line_insert
0x5142                          @@3:
5142   0280 033B                	MVI bas_ttypos,R0
5144   0240 033A                	MVO R0,bas_firstpos
5146   0220 0056                	B main_loop
0x5148                          @@1:
5148   0004 015C 02C6           	CALL bas_output
514B   0220 005B                	B main_loop

0x514D                          keywords_exec:
514D   0000                     	DECLE $0000	; Colon
514E   5509                     	DECLE bas_list
514F   5557                     	DECLE bas_new
5150   5560                     	DECLE bas_cls
5151   5570                     	DECLE bas_run
5152   5591                     	DECLE bas_stop
5153   5596                     	DECLE bas_print
5154   55E1                     	DECLE bas_input
5155   5635                     	DECLE bas_goto
5156   566A                     	DECLE bas_if
5157   5B7B                     	DECLE bas_syntax_error
5158   5B7B                     	DECLE bas_syntax_error
5159   5721                     	DECLE bas_for		; FOR
515A   5B7B                     	DECLE bas_syntax_error
515B   5B7B                     	DECLE bas_syntax_error
515C   577D                     	DECLE bas_next		; NEXT
515D   57FE                     	DECLE bas_gosub
515E   5847                     	DECLE bas_return
515F   585E                     	DECLE bas_rem
5160   5878                     	DECLE bas_restore
5161   58C1                     	DECLE bas_read
5162   592C                     	DECLE bas_data
5163   5936                     	DECLE bas_dim
5164   5998                     	DECLE bas_mode
5165   59B6                     	DECLE bas_color
5166   59BD                     	DECLE bas_define
5167   5A30                     	DECLE bas_sprite
5168   5A92                     	DECLE bas_wait
5169   5A9C                     	DECLE bas_sound	
516A   5B46                     	DECLE bas_border

                                	; Operators and BASIC functions cannot be executed directly
516B   5B7B                     	DECLE bas_syntax_error	; AND
516C   5B7B                     	DECLE bas_syntax_error	; NOT
516D   5B7B                     	DECLE bas_syntax_error	; OR
516E   5B7B                     	DECLE bas_syntax_error	; XOR
516F   5B7B                     	DECLE bas_syntax_error	; <=
5170   5B7B                     	DECLE bas_syntax_error	; >=
5171   5B7B                     	DECLE bas_syntax_error	; <>
5172   5B7B                     	DECLE bas_syntax_error	; =
5173   5B7B                     	DECLE bas_syntax_error	; <
5174   5B7B                     	DECLE bas_syntax_error	; >
5175   5B7B                     	DECLE bas_syntax_error	; INT
5176   5B7B                     	DECLE bas_syntax_error	; ABS
5177   5B7B                     	DECLE bas_syntax_error	; SGN
5178   5B7B                     	DECLE bas_syntax_error	; RND
5179   5B7B                     	DECLE bas_syntax_error	; STICK
517A   5B7B                     	DECLE bas_syntax_error	; TRIG
517B   5B7B                     	DECLE bas_syntax_error	; KEY
517C   5B56                     	DECLE bas_bk	; BK

0x517D                          keywords:
517D   003A 0000                	DECLE ":",0	; $0100
517F   004C 0049 0053 0054      	DECLE "LIST",0
5183   0000 
5184   004E 0045 0057 0000      	DECLE "NEW",0
5188   0043 004C 0053 0000      	DECLE "CLS",0
518C   0052 0055 004E 0000      	DECLE "RUN",0	; $0104
5190   0053 0054 004F 0050      	DECLE "STOP",0
5194   0000 
5195   0050 0052 0049 004E      	DECLE "PRINT",0
5199   0054 0000 
519B   0049 004E 0050 0055      	DECLE "INPUT",0
519F   0054 0000 
51A1   0047 004F 0054 004F      	DECLE "GOTO",0	; $0108
51A5   0000 
51A6   0049 0046 0000           	DECLE "IF",0
51A9   0054 0048 0045 004E      	DECLE "THEN",0
51AD   0000 
51AE   0045 004C 0053 0045      	DECLE "ELSE",0
51B2   0000 
51B3   0046 004F 0052 0000      	DECLE "FOR",0	; $010C
51B7   0054 004F 0000           	DECLE "TO",0
51BA   0053 0054 0045 0050      	DECLE "STEP",0
51BE   0000 
51BF   004E 0045 0058 0054      	DECLE "NEXT",0
51C3   0000 
51C4   0047 004F 0053 0055      	DECLE "GOSUB",0	; $0110
51C8   0042 0000 
51CA   0052 0045 0054 0055      	DECLE "RETURN",0
51CE   0052 004E 0000 
51D1   0052 0045 004D 0000      	DECLE "REM",0
51D5   0052 0045 0053 0054      	DECLE "RESTORE",0
51D9   004F 0052 0045 0000 
51DD   0052 0045 0041 0044      	DECLE "READ",0	; $0114
51E1   0000 
51E2   0044 0041 0054 0041      	DECLE "DATA",0
51E6   0000 
51E7   0044 0049 004D 0000      	DECLE "DIM",0
51EB   004D 004F 0044 0045      	DECLE "MODE",0	
51EF   0000 
51F0   0043 004F 004C 004F      	DECLE "COLOR",0	; $0118
51F4   0052 0000 
51F6   0044 0045 0046 0049      	DECLE "DEFINE",0
51FA   004E 0045 0000 
51FD   0053 0050 0052 0049      	DECLE "SPRITE",0
5201   0054 0045 0000 
5204   0057 0041 0049 0054      	DECLE "WAIT",0
5208   0000 
5209   0053 004F 0055 004E      	DECLE "SOUND",0	; $011C
520D   0044 0000 
520F   0042 004F 0052 0044      	DECLE "BORDER",0
5213   0045 0052 0000 
5216   0041 004E 0044 0000      	DECLE "AND",0	; $011e
521A   004E 004F 0054 0000      	DECLE "NOT",0
521E   004F 0052 0000           	DECLE "OR",0
5221   0058 004F 0052 0000      	DECLE "XOR",0
5225   003C 003D 0000           	DECLE "<=",0	; $0122
5228   003E 003D 0000           	DECLE ">=",0
522B   003C 003E 0000           	DECLE "<>",0
522E   003D 0000                	DECLE "=",0
5230   003C 0000                	DECLE "<",0
5232   003E 0000                	DECLE ">",0
5234   0049 004E 0054 0000      	DECLE "INT",0
5238   0041 0042 0053 0000      	DECLE "ABS",0
523C   0053 0047 004E 0000      	DECLE "SGN",0
5240   0052 004E 0044 0000      	DECLE "RND",0
5244   0053 0054 0049 0043      	DECLE "STICK",0
5248   004B 0000 
524A   0053 0054 0052 0049      	DECLE "STRIG",0
524E   0047 0000 
5250   004B 0045 0059 0000      	DECLE "KEY",0
5254   0042 004B 0000           	DECLE "BK",0
5257   0000                     	DECLE 0

0x5258                          at_line:
5258   0020 0061 0074 0020      	DECLE " at ",0
525C   0000 
0x525D                          errors:
525D   0045 0043 0053 0020      	DECLE "ECS extended BASIC",$0d,$0a,"by nanochess 2025",0
5261   0065 0078 0074 0065 006E 0064 0065 0064 
5269   0020 0042 0041 0053 0049 0043 000D 000A 
5271   0062 0079 0020 006E 0061 006E 006F 0063 
5279   0068 0065 0073 0073 0020 0032 0030 0032 
5281   0035 0000 
5283   0053 0079 006E 0074      	DECLE "Syntax error",0
5287   0061 0078 0020 0065 0072 0072 006F 0072 
528F   0000 
5290   0053 0054 004F 0050      	DECLE "STOP",0
5294   0000 
5295   0055 006E 0064 0065      	DECLE "Undefined",0
5299   0066 0069 006E 0065 0064 0000 
529F   0054 006F 006F 0020      	DECLE "Too many GOSUB",0
52A3   006D 0061 006E 0079 0020 0047 004F 0053 
52AB   0055 0042 0000 
52AE   0052 0045 0054 0055      	DECLE "RETURN w/o GOSUB",0
52B2   0052 004E 0020 0077 002F 006F 0020 0047 
52BA   004F 0053 0055 0042 0000 
52BF   0054 006F 006F 0020      	DECLE "Too many FOR",0
52C3   006D 0061 006E 0079 0020 0046 004F 0052 
52CB   0000 
52CC   004E 0045 0058 0054      	DECLE "NEXT w/o FOR",0
52D0   0020 0077 002F 006F 0020 0046 004F 0052 
52D8   0000 
52D9   004E 006F 0020 0044      	DECLE "No DATA found",0
52DD   0041 0054 0041 0020 0066 006F 0075 006E 
52E5   0064 0000 
52E7   0052 0065 0064 0065      	DECLE "Redefined DIM",0
52EB   0066 0069 006E 0065 0064 0020 0044 0049 
52F3   004D 0000 
52F5   004F 0075 0074 0020      	DECLE "Out of memory",0
52F9   006F 0066 0020 006D 0065 006D 006F 0072 
5301   0079 0000 
5303   0055 006E 0064 0065      	DECLE "Undefined array",0
5307   0066 0069 006E 0065 0064 0020 0061 0072 
530F   0072 0061 0079 0000 
5313   004F 0075 0074 0020      	DECLE "Out of bounds",0
5317   006F 0066 0020 0062 006F 0075 006E 0064 
531F   0073 0000 
                                	
                                	;
                                	; Read a line from the input
                                	;
0x5321                          bas_get_line:	PROC
5321   0275                     	PSHR R5
5322   02BC 8040                	MVII #basic_buffer,R4
0x5324                          @@2:
5324   0274                     	PSHR R4
5325   0004 015C 02A2           	CALL bas_save_cursor
0x5328                          @@0:
5328   0004 015C 02A8           	CALL bas_blink_cursor
532B   0004 015C 03FB           	CALL SCAN_KBD
532E   0378 00FF                	CMPI #KEY.NONE,R0
5330   0224 0009                	BEQ @@0
5332   0004 015C 02C0           	CALL bas_restore_cursor
5335   02B4                     	PULR R4
5336   0378 000A                	CMPI #KEY.ENTER,R0
5338   0204 001D                	BEQ @@1
533A   0378 001C                	CMPI #KEY.LEFT,R0
533C   020C 0011                	BNE @@3
533E   037C 8040                	CMPI #basic_buffer,R4
5340   0224 001D                	BEQ @@2
5342   0014                     	DECR R4
5343   0274                     	PSHR R4
5344   0004 015C 02C6           	CALL bas_output
5347   0284 033B                	MVI bas_ttypos,R4
5349   0280 033C                	MVI bas_curcolor,R0
534B   0260                     	MVO@ R0,R4
534C   02B4                     	PULR R4
534D   0220 002A                	B @@2

534F   0260                     @@3:	MVO@ R0,R4
5350   0274                     	PSHR R4
5351   0004 015C 02C6           	CALL bas_output
5354   02B4                     	PULR R4
5355   0220 0032                	B @@2

5357   01C0                     @@1:	CLRR R0
5358   0260                     	MVO@ R0,R4
5359   02B8 000D                	MVII #BAS_CR,R0
535B   0004 015C 02C6           	CALL bas_output
535E   02B8 000A                	MVII #BAS_LF,R0
5360   0004 015C 02C6           	CALL bas_output
5363   02BC 8040                	MVII #basic_buffer,R4
5365   02B7                     	PULR PC
                                	ENDP

                                	;
                                	; Search for a line number.
                                	; Input:
                                	;   R0 = Line number.
                                	; Output:
                                	;   R4 = Pointer to the first word of the line.
                                	;
0x5366                          line_search:	PROC
5366   02BC 80C0                	MVII #program_start,R4
5368   0344 0345                	CMP program_end,R4	; Empty program?
536A   0204 000B                	BEQ @@1			; Yes, exit (for insertion).
536C   02A1                     @@0:	MVI@ R4,R1
536D   0148                     	CMPR R1,R0	; Compare the line number.
536E   0204 0009                	BEQ @@3		; Found the line number? Yes, jump.
5370   0209 0007                	BNC @@3		; Found a higher line number? Yes, jump (for insertion).
5372   02E4                     	ADD@ R4,R4	; Jump over the tokens.
5373   0344 0345                	CMP program_end,R4
5375   022C 000A                	BNE @@0
5377   01C9                     @@1:	CLRR R1		; So it is non-equal (for insertion).
5378   00AF                     @@2:	MOVR R5,PC

5379   0014                     @@3:	DECR R4
537A   00AF                     	MOVR R5,PC
                                	ENDP

                                	;
                                	; Delete a line.
                                	; R4 = Pointer to first word of the line.
                                	;
0x537B                          line_delete:	PROC
537B   0275                     	PSHR R5
537C   000C                     	INCR R4
537D   02A5                     	MVI@ R4,R5	; Get the tokenized length.
537E   00E5                     	ADDR R4,R5	; Now R5 is pointer to the next line.
537F   0014                     	DECR R4
5380   0014                     	DECR R4		; R4 is pointer to the line for deletion.
5381   00AA                     	MOVR R5,R2
5382   0122                     	SUBR R4,R2	; Number of words to delete.
5383   0283 0345                	MVI program_end,R3
5385   000B                     	INCR R3
5386   012B                     	SUBR R5,R3	; Number of words to move.
5387   0281 0345                	MVI program_end,R1
5389   0111                     	SUBR R2,R1	; Move end pointer.
538A   0241 0345                	MVO R1,program_end
538C   02A8                     @@1:	MVI@ R5,R0
538D   0260                     	MVO@ R0,R4
538E   0013                     	DECR R3
538F   022C 0004                	BNE @@1
5391   02B7                     	PULR PC
                                	ENDP

                                	;
                                	; Insert a line.
                                	; R4 = Pointer to where to insert the line.
                                	; R1 = Line number.
                                	; R2 = Tokenized line.
                                	; R3 = Tokenized length.
                                	;
0x5392                          line_insert:	PROC
5392   0275                     	PSHR R5
5393   0285 0345                	MVI program_end,R5
5395   00A0                     	MOVR R4,R0
5396   00AC                     	MOVR R5,R4	; Copy source pointer to target pointer.
5397   00DC                     	ADDR R3,R4
5398   02FC 0002                	ADDI #2,R4	; Account for line and length words.
539A   0244 0345                	MVO R4,program_end
539C   0271                     	PSHR R1
539D   00A9                     	MOVR R5,R1
539E   0101                     	SUBR R0,R1
539F   0009                     	INCR R1
53A0   0270                     	PSHR R0
53A1   02A8                     @@1:	MVI@ R5,R0
53A2   0015                     	DECR R5
53A3   0015                     	DECR R5
53A4   0260                     	MVO@ R0,R4
53A5   0014                     	DECR R4
53A6   0014                     	DECR R4
53A7   0011                     	DECR R1
53A8   022C 0008                	BNE @@1
53AA   02B4                     	PULR R4
53AB   02B1                     	PULR R1
53AC   0261                     	MVO@ R1,R4	; Write the line number.
53AD   0263                     	MVO@ R3,R4	; Write the tokenized length.
53AE   0095                     	MOVR R2,R5
53AF   02A8                     @@2:	MVI@ R5,R0
53B0   0260                     	MVO@ R0,R4
53B1   0013                     	DECR R3
53B2   022C 0004                	BNE @@2
53B4   02B7                     	PULR PC
                                	ENDP

                                	;
                                	; Get next character or token.
                                	;
0x53B5                          get_next:	PROC
53B5   02A0                     	MVI@ R4,R0
53B6   0378 0020                	CMPI #$20,R0
53B8   0224 0004                	BEQ get_next
53BA   00AF                     	MOVR R5,PC
                                	ENDP

                                	;
                                	; Emit a BASIC error
                                	;
0x53BB                          bas_error:	PROC
53BB   02BC 525D                	MVII #errors,R4
53BD   0080                     	TSTR R0
53BE   0204 0007                	BEQ @@2
53C0   02A1                     @@1:	MVI@ R4,R1
53C1   0089                     	TSTR R1
53C2   022C 0003                	BNE @@1
53C4   0010                     	DECR R0
53C5   022C 0006                	BNE @@1
0x53C7                          @@2:
53C7   02A0                     	MVI@ R4,R0
53C8   0080                     	TSTR R0
53C9   0204 0007                	BEQ @@3
53CB   0274                     	PSHR R4
53CC   0004 015C 02C6           	CALL bas_output
53CF   02B4                     	PULR R4
53D0   0220 000A                	B @@2

0x53D2                          @@3:
53D2   0280 033E                	MVI bas_curline,R0
53D4   0080                     	TSTR R0
53D5   0204 0016                	BEQ @@4
53D7   0378 FFFF                	CMPI #$FFFF,R0
53D9   0204 0012                	BEQ @@4	
53DB   02BC 5258                	MVII #at_line,R4
0x53DD                          @@5:
53DD   02A0                     	MVI@ R4,R0
53DE   0080                     	TSTR R0
53DF   0204 0007                	BEQ @@6
53E1   0274                     	PSHR R4
53E2   0004 015C 02C6           	CALL bas_output
53E5   02B4                     	PULR R4
53E6   0220 000A                	B @@5
0x53E8                          @@6:
53E8   0280 033E                	MVI bas_curline,R0
53EA   0004 0160 005F           	CALL PRNUM16.l
0x53ED                          @@4:
53ED   02B8 000D                	MVII #BAS_CR,R0
53EF   0004 015C 02C6           	CALL bas_output
53F2   02B8 000A                	MVII #BAS_LF,R0
53F4   0004 015C 02C6           	CALL bas_output
53F7   0220 0330                	B basic_restart
                                	ENDP

0x53F9                          bas_read_card:	PROC
53F9   02A0                     	MVI@ R4,R0
53FA   03B8 0FF8                	ANDI #$0FF8,R0
53FC   0064                     	SLR R0,2
53FD   0060                     	SLR R0,1
53FE   00AF                     	MOVR R5,PC
                                	ENDP

                                	;
                                	; Tokenize a BASIC line
                                	; R4 = Pointer to first character in the screen.
                                	;
0x53FF                          bas_tokenize:	PROC
53FF   0275                     	PSHR R5
5400   01DB                     	CLRR R3
5401   0243 8040                	MVO R3,basic_buffer	; Line zero
5403   000B                     	INCR R3
5404   0243 8041                	MVO R3,basic_buffer+1	; Tokenized length
5406   01DB                     	CLRR R3
5407   0243 8042                	MVO R3,basic_buffer+2	; Mark end of tokenized line.

5409   02BB 8040                	MVII #basic_buffer,R3
540B   01D2                     	CLRR R2			; Line number.
540C   0344 033B                @@1:	CMP bas_ttypos,R4	; Reached the cursor.
540E   0204 00A8                	BEQ @@0
5410   0004 0150 03F9           	CALL bas_read_card
5413   0080                     	TSTR R0			; Space character?
5414   0224 0009                	BEQ @@1
0x5416                          @@2:
5416   0378 0010                	CMPI #$10,R0
5418   0209 0015                	BNC @@3
541A   0378 001A                	CMPI #$1A,R0
541C   0201 0011                	BC @@3
541E   0338 0010                	SUBI #$10,R0
5420   0091                     	MOVR R2,R1
5421   004E                     	SLL R2,2
5422   00CA                     	ADDR R1,R2		; x5
5423   00D2                     	ADDR R2,R2		; x10
5424   00C2                     	ADDR R0,R2
5425   0344 033B                	CMP bas_ttypos,R4
5427   0204 0005                	BEQ @@19
5429   0004 0150 03F9           	CALL bas_read_card
542C   0220 0017                	B @@2

542E   01C0                     @@19:	CLRR R0
542F   025A                     @@3:	MVO@ R2,R3		; Take note of the line number
5430   000B                     	INCR R3
5431   000B                     	INCR R3			; Avoid the tokenized length.
5432   0080                     	TSTR R0			; Space character?
5433   020C 000A                	BNE @@4
0x5435                          @@6:
5435   0344 033B                	CMP bas_ttypos,R4
5437   0204 006C                	BEQ @@5
5439   0004 0150 03F9           	CALL bas_read_card
543C   0080                     	TSTR R0
543D   0224 0009                	BEQ @@6
                                	; Start tokenizing
543F   0378 0002                @@4:	CMPI #$02,R0		; Quotes?
5441   020C 0015                	BNE @@14
5443   02F8 0020                @@15:	ADDI #$20,R0
5445   0258                     	MVO@ R0,R3		; Pass along string.
5446   000B                     	INCR R3
5447   0344 033B                	CMP bas_ttypos,R4
5449   0204 005A                	BEQ @@5
544B   0004 0150 03F9           	CALL bas_read_card
544E   0378 0002                	CMPI #$02,R0
5450   022C 000E                	BNE @@15
5452   02F8 0020                	ADDI #$20,R0
5454   0258                     	MVO@ R0,R3
5455   000B                     	INCR R3
5456   0220 0022                	B @@6

5458   0378 0010                @@14:	CMPI #$10,R0		; ASCII character $20-$2f?
545A   0209 0032                	BNC @@20
545C   0014                     	DECR R4
545D   02BA 517D                	MVII #keywords,R2
545F   02BD 0100                	MVII #TOKEN_START,R5
5461   0274                     @@8:	PSHR R4
                                	;
                                	; Compare input against possible token.
                                	;
5462   02A0                     @@11:	MVI@ R4,R0
5463   03B8 0FF8                	ANDI #$0FF8,R0
5465   0064                     	SLR R0,2
5466   0060                     	SLR R0,1
5467   0378 0041                	CMPI #$41,R0	; Convert lowercase to uppercase.
5469   0205 0006                	BLT @@9
546B   0378 005B                	CMPI #$5B,R0
546D   020D 0002                	BGE @@9
546F   0338 0020                	SUBI #$20,R0
5471   02F8 0020                @@9:	ADDI #$20,R0	; Now it is ASCII value.
5473   0350                     	CMP@ R2,R0
5474   020C 000A                	BNE @@10
5476   000A                     	INCR R2
5477   0290                     	MVI@ R2,R0
5478   0080                     	TSTR R0		; End of token?
5479   022C 0018                	BNE @@11
547B   025D                     	MVO@ R5,R3	; Write token.
547C   000B                     	INCR R3
547D   02B5                     	PULR R5		; Ignore restart position.
547E   0200 001C                	B @@16

5480   0290                     @@10:	MVI@ R2,R0
5481   000A                     	INCR R2
5482   0080                     	TSTR R0
5483   022C 0004                	BNE @@10
5485   000D                     	INCR R5		; Next token
5486   02B4                     	PULR R4		; Restart input position.
5487   0290                     	MVI@ R2,R0
5488   0080                     	TSTR R0
5489   022C 0029                	BNE @@8
                                	; No token found	
548B   0004 0150 03F9           @@7:	CALL bas_read_card
0x548E                          @@20:
548E   02F8 0020                	ADDI #$20,R0
5490   0378 0061                	CMPI #$61,R0
5492   0209 0006                	BNC @@18
5494   0378 007B                	CMPI #$7B,R0
5496   0201 0002                	BC @@18
5498   0338 0020                	SUBI #$20,R0
0x549A                          @@18:
549A   0258                     	MVO@ R0,R3
549B   000B                     	INCR R3
0x549C                          @@16:
549C   0344 033B                	CMP bas_ttypos,R4
549E   0204 0005                	BEQ @@5
54A0   0004 0150 03F9           	CALL bas_read_card
54A3   0220 0065                	B @@4

                                	; End of tokenized line
                                	; Remove trailing spaces.
54A5   037B 8042                @@5:	CMPI #basic_buffer+2,R3
54A7   0204 0007                	BEQ @@17
54A9   0013                     	DECR R3
54AA   029A                     	MVI@ R3,R2
54AB   037A 0020                	CMPI #$20,R2
54AD   0224 0009                	BEQ @@5
54AF   000B                     	INCR R3
0x54B0                          @@17:
54B0   01D2                     	CLRR R2
54B1   025A                     	MVO@ R2,R3
54B2   000B                     	INCR R3
54B3   025A                     	MVO@ R2,R3
54B4   033B 8042                	SUBI #basic_buffer+2,R3
54B6   0243 8041                	MVO R3,basic_buffer+1	; Take note of the length

54B8   02B7                     @@0:	PULR PC	
                                	ENDP

                                	;
                                	; Execute a BASIC line
                                	; r4 = Pointer to start of line.
                                	;
0x54B9                          bas_execute_line:	PROC
54B9   0275                     	PSHR R5
0x54BA                          @@0:
54BA   02A0                     	MVI@ R4,R0
54BB   0080                     	TSTR R0
54BC   0204 0024                	BEQ @@3
54BE   0240 033E                	MVO R0,bas_curline
54C0   000C                     	INCR R4
54C1   02A0                     @@2:	MVI@ R4,R0
54C2   0080                     	TSTR R0
54C3   0224 000A                	BEQ @@0
54C5   0014                     	DECR R4
54C6   0004 0154 00E3           	CALL bas_execute
54C9   0004 0150 03B5           	CALL get_next
54CC   0080                     	TSTR R0
54CD   0224 0014                	BEQ @@0
54CF   0378 010B                	CMPI #TOKEN_ELSE,R0
54D1   0204 0009                	BEQ @@1
54D3   0378 0100                	CMPI #TOKEN_COLON,R0
54D5   0224 0015                	BEQ @@2
54D7   02B8 0001                	MVII #ERR_SYNTAX,R0
54D9   0004 0150 03BB           	CALL bas_error

54DC   02A0                     @@1:	MVI@ R4,R0
54DD   0080                     	TSTR R0
54DE   022C 0003                	BNE @@1
54E0   0220 0027                	B @@0

54E2   02B7                     @@3:	PULR PC
                                	ENDP

                                	;
                                	; Execute a BASIC statement
                                	;
0x54E3                          bas_execute:	PROC
54E3   0275                     	PSHR R5
0x54E4                          @@0:
54E4   02A0                     	MVI@ R4,R0
54E5   0378 0020                	CMPI #32,R0
54E7   0224 0004                	BEQ @@0
54E9   0378 0100                	CMPI #TOKEN_START,R0	; Token found?
54EB   0201 0017                	BC @@2
                                	; Try an assignment
54ED   0004 0154 02CB           	CALL get_var_addr
54F0   0275                     	PSHR R5
54F1   0004 0150 03B5           	CALL get_next
54F4   0378 0125                	CMPI #TOKEN_EQ,R0
54F6   020C 0007                	BNE @@1
54F8   0004 0158 038A           	CALL bas_expr
54FB   02B5                     	PULR R5
54FC   026A                     	MVO@ R2,R5
54FD   026B                     	MVO@ R3,R5
54FE   02B7                     	PULR PC
                                	
0x54FF                          @@1:
54FF   02B8 0001                	MVII #ERR_SYNTAX,R0
5501   0004 0150 03BB           	CALL bas_error

5504   02BB 504D                @@2:	MVII #keywords_exec-TOKEN_START,R3
5506   00C3                     	ADDR R0,R3
5507   02B5                     	PULR R5
5508   029F                     	MVI@ R3,PC
                                	ENDP

                                	;
                                	; List the program
                                	;
0x5509                          bas_list:	PROC
5509   0275                     	PSHR R5
550A   0274                     	PSHR R4
550B   02BC 80C0                	MVII #program_start,R4
550D   02A0                     @@1:	MVI@ R4,R0
550E   0080                     	TSTR R0		; End of the program?
550F   0204 0044                	BEQ @@2		; Yes, jump.
5511   0274                     	PSHR R4
5512   0004 0160 005F           	CALL PRNUM16.l
5515   02B8 0020                	MVII #$20,R0	; Space.
5517   0004 015C 02C6           	CALL bas_output
551A   02B4                     	PULR R4
551B   02A1                     	MVI@ R4,R1	; Tokenized length.
0x551C                          @@4:
551C   02A0                     	MVI@ R4,R0
551D   0080                     	TSTR R0
551E   0204 0027                	BEQ @@3
5520   0378 0100                	CMPI #TOKEN_START,R0
5522   0201 0007                	BC @@5
5524   0274                     	PSHR R4
5525   0004 015C 02C6           	CALL bas_output
5528   02B4                     	PULR R4
5529   0220 000E                	B @@4

                                	; Token
552B   02BD 517D                @@5:	MVII #keywords,R5
552D   0338 0100                	SUBI #TOKEN_START,R0
552F   0204 0007                	BEQ @@6
5531   02A9                     @@7:	MVI@ R5,R1
5532   0089                     	TSTR R1
5533   022C 0003                	BNE @@7
5535   0010                     	DECR R0
5536   022C 0006                	BNE @@7
5538   0274                     @@6:	PSHR R4
5539   02A8                     @@8:	MVI@ R5,R0
553A   0080                     	TSTR R0
553B   0204 0007                	BEQ @@9
553D   0275                     	PSHR R5
553E   0004 015C 02C6           	CALL bas_output
5541   02B5                     	PULR R5
5542   0220 000A                	B @@8

5544   02B4                     @@9:	PULR R4
5545   0220 002A                	B @@4

5547   0274                     @@3:	PSHR R4
5548   02B8 000D                	MVII #BAS_CR,R0
554A   0004 015C 02C6           	CALL bas_output
554D   02B8 000A                	MVII #BAS_LF,R0
554F   0004 015C 02C6           	CALL bas_output
5552   02B4                     	PULR R4
5553   0220 0047                	B @@1

5555   02B4                     @@2:	PULR R4
5556   02B7                     	PULR PC
                                	ENDP

                                	;
                                	; Erase the whole program
                                	;
0x5557                          bas_new:	PROC
5557   0274                     	PSHR R4
5558   02BC 80C0                	MVII #program_start,R4
555A   0244 0345                	MVO R4,program_end
555C   01C0                     	CLRR R0
555D   0260                     	MVO@ R0,R4
555E   02B4                     	PULR R4
555F   00AF                     	MOVR R5,PC
                                	ENDP

                                	;
                                	; Clear the screen
                                	;
0x5560                          bas_cls:	PROC
5560   0274                     	PSHR R4
5561   02BC 0200                	MVII #$0200,R4	; Pointer to the screen.
5563   0244 033B                	MVO R4,bas_ttypos
5565   0280 033C                	MVI bas_curcolor,R0
5567   02B9 0078                	MVII #$00F0/2,R1
5569   0260                     @@1:	MVO@ R0,R4	; Erase the screen.
556A   0260                     	MVO@ R0,R4
556B   0011                     	DECR R1
556C   022C 0004                	BNE @@1
556E   02B4                     	PULR R4
556F   00AF                     	MOVR R5,PC
                                	ENDP
                                	
                                	;
                                	; Run the program
                                	;
0x5570                          bas_run:	PROC
5570   02BE 02F0                	MVII #STACK,R6
5572   02B8 9EC0                	MVII #start_for,R0
5574   0240 033F                	MVO R0,bas_forptr
5576   02B8 9E80                	MVII #start_gosub,R0
5578   0240 0340                	MVO R0,bas_gosubptr

557A   0240 0344                	MVO R0,bas_memlimit

557C   0004 0158 0064           	CALL data_locate
557F   0240 0341                	MVO R0,bas_dataptr
                                	
5581   0283 0345                	MVI program_end,R3
5583   000B                     	INCR R3			; Jump over the final word.
5584   0243 0342                	MVO R3,bas_arrays	
5586   01C0                     	CLRR R0			; No arrays.
5587   0258                     	MVO@ R0,R3
5588   0243 0343                	MVO R3,bas_last_array

558A   02BC 80C0                	MVII #program_start,R4
0x558C                          @@1:
558C   0004 0154 00B9           	CALL bas_execute_line
558F   0220 04C8                	B basic_restart
                                	ENDP

                                	;
                                	; Stop the program
                                	;
0x5591                          bas_stop:	PROC
5591   02B8 0002                	MVII #ERR_STOP,R0
5593   0004 0150 03BB           	CALL bas_error
                                	ENDP

                                	;
                                	; PRINT
                                	;
0x5596                          bas_print:	PROC
5596   0275                     	PSHR R5
0x5597                          @@3:
5597   0004 0150 03B5           	CALL get_next
0x559A                          @@5:
559A   0080                     	TSTR R0
559B   0204 0023                	BEQ @@6
559D   0378 0100                	CMPI #TOKEN_COLON,R0
559F   0204 001F                	BEQ @@6
55A1   0378 010B                	CMPI #TOKEN_ELSE,R0
55A3   0204 001B                	BEQ @@6
55A5   0378 0022                	CMPI #$22,R0
55A7   020C 000C                	BNE @@2
0x55A9                          @@1:
55A9   02A0                     	MVI@ R4,R0
55AA   0378 0022                	CMPI #$22,R0
55AC   0224 0016                	BEQ @@3
55AE   0274                     	PSHR R4
55AF   0004 015C 02C6           	CALL bas_output
55B2   02B4                     	PULR R4
55B3   0220 000B                	B @@1
                                	
55B5   0378 003B                @@2:	CMPI #$3B,R0
55B7   020C 0015                	BNE @@4
55B9   0004 0150 03B5           	CALL get_next
55BC   0080                     	TSTR R0
55BD   022C 0024                	BNE @@5
55BF   02B7                     	PULR PC
0x55C0                          @@6:
55C0   0014                     	DECR R4
55C1   0274                     	PSHR R4
55C2   02B8 000D                	MVII #BAS_CR,R0
55C4   0004 015C 02C6           	CALL bas_output
55C7   02B8 000A                	MVII #BAS_LF,R0
55C9   0004 015C 02C6           	CALL bas_output
55CC   02B4                     	PULR R4
55CD   02B7                     	PULR PC
0x55CE                          @@4:
55CE   0014                     	DECR R4
55CF   0004 0158 038A           	CALL bas_expr
55D2   0274                     	PSHR R4
55D3   0090                     	MOVR R2,R0
55D4   0099                     	MOVR R3,R1
55D5   0004 0160 03BC           	CALL fpprint
55D8   02B4                     	PULR R4
55D9   0220 0043                	B @@3

55DB   02B8 0001                	MVII #ERR_SYNTAX,R0
55DD   0004 0150 03BB           	CALL bas_error
55E0   02B7                     	PULR PC
                                	ENDP

                                	;
                                	; INPUT
                                	;
0x55E1                          bas_input:	PROC
55E1   0275                     	PSHR R5
0x55E2                          @@3:
55E2   0004 0150 03B5           	CALL get_next
0x55E5                          @@5:
55E5   0080                     	TSTR R0
55E6   0204 0047                	BEQ @@6
55E8   0378 0100                	CMPI #TOKEN_COLON,R0
55EA   0204 0043                	BEQ @@6
55EC   0378 010B                	CMPI #TOKEN_ELSE,R0
55EE   0204 003F                	BEQ @@6
55F0   0378 0022                	CMPI #$22,R0
55F2   020C 0016                	BNE @@4
0x55F4                          @@1:
55F4   02A0                     	MVI@ R4,R0
55F5   0378 0022                	CMPI #$22,R0
55F7   0204 0007                	BEQ @@2
55F9   0274                     	PSHR R4
55FA   0004 015C 02C6           	CALL bas_output
55FD   02B4                     	PULR R4
55FE   0220 000B                	B @@1
                                	
5600   0004 0150 03B5           @@2:	CALL get_next
5603   0378 003B                	CMPI #$3B,R0
5605   020C 0028                	BNE @@6
5607   0004 0150 03B5           	CALL get_next
0x560A                          @@4:
560A   0378 0041                	CMPI #$41,R0
560C   0209 0021                	BNC @@6
560E   0378 005B                	CMPI #$5B,R0
5610   0201 001D                	BC @@6
5612   0274                     	PSHR R4
5613   0270                     	PSHR R0
5614   02B8 003F                	MVII #$3F,R0
5616   0004 015C 02C6           	CALL bas_output
5619   02B8 0020                	MVII #$20,R0
561B   0004 015C 02C6           	CALL bas_output
561E   0004 0150 0321           	CALL bas_get_line
5621   0004 0158 038A           	CALL bas_expr
5624   02B0                     	PULR R0
5625   0338 0041                	SUBI #$41,R0
5627   0048                     	SLL R0,1
5628   02BD 8080                	MVII #variables,R5
562A   00C5                     	ADDR R0,R5
562B   026A                     	MVO@ R2,R5
562C   026B                     	MVO@ R3,R5
562D   02B4                     	PULR R4
562E   02B7                     	PULR PC

562F   02B8 0001                @@6:	MVII #ERR_SYNTAX,R0
5631   0004 0150 03BB           	CALL bas_error
5634   02B7                     	PULR PC
                                	ENDP

                                	;
                                	; GOTO
                                	;
0x5635                          bas_goto:	PROC
5635   0275                     	PSHR R5
                                	; !!! Change for expression evaluation
5636   01D2                     	CLRR R2
5637   0004 0150 03B5           	CALL get_next
563A   0378 0030                @@1:	CMPI #$30,R0
563C   0209 000E                	BNC @@2
563E   0378 003A                	CMPI #$3A,R0
5640   0201 000A                	BC @@2
5642   0338 0030                	SUBI #$30,R0
5644   0091                     	MOVR R2,R1
5645   004E                     	SLL R2,2
5646   00CA                     	ADDR R1,R2		; x5
5647   00D2                     	ADDR R2,R2		; x10
5648   00C2                     	ADDR R0,R2
5649   02A0                     	MVI@ R4,R0
564A   0220 0011                	B @@1

564C   0090                     @@2:	MOVR R2,R0
564D   0004 0150 0366           	CALL line_search
5650   0148                     	CMPR R1,R0
5651   0204 0005                	BEQ @@3
5653   02B8 0003                	MVII #ERR_LINE,R0
5655   0004 0150 03BB           	CALL bas_error
0x5658                          @@3:
5658   0274                     	PSHR R4
5659   0004 015C 03FB           	CALL SCAN_KBD
565C   02B4                     	PULR R4
565D   0378 001B                	CMPI #KEY.ESC,R0
565F   020C 0005                	BNE @@4
5661   02B8 0002                	MVII #ERR_STOP,R0
5663   0004 0150 03BB           	CALL bas_error
0x5666                          @@4:
5666   02BE 02F0                	MVII #STACK,R6
5668   0220 00DD                	B bas_run.1
                                	ENDP

                                	;
                                	; IF
                                	;
0x566A                          bas_if:	PROC
566A   0275                     	PSHR R5
566B   0004 0158 038A           	CALL bas_expr
566E   03BB 007F                	ANDI #$7F,R3		; Is it zero?
5670   0204 0021                	BEQ @@1			; Yes, jump.
5672   0004 0150 03B5           	CALL get_next
5675   0378 010A                	CMPI #TOKEN_THEN,R0
5677   020C 0013                	BNE @@2
5679   0004 0150 03B5           	CALL get_next
567C   0378 0030                	CMPI #$30,R0
567E   0209 0008                	BNC @@3
5680   0378 003A                	CMPI #$3A,R0
5682   0201 0004                	BC @@3
5684   02B5                     	PULR R5
5685   0014                     	DECR R4
5686   0220 0052                	B bas_goto
0x5688                          @@3:
5688   02B5                     	PULR R5
5689   0014                     	DECR R4
568A   0220 01A8                	B bas_execute
0x568C                          @@2:
568C   0378 0108                	CMPI #TOKEN_GOTO,R0
568E   020C 0003                	BNE @@1
5690   02B5                     	PULR R5
5691   0220 005D                	B bas_goto

5693   01ED                     @@1:	CLRR R5
0x5694                          @@6:
5694   0275                     	PSHR R5
5695   0004 0150 03B5           	CALL get_next
5698   02B5                     	PULR R5
5699   0080                     	TSTR R0		; Reached end of line?
569A   0204 000F                	BEQ @@4		; Yes, no ELSE found.
569C   0378 010A                	CMPI #TOKEN_THEN,R0
569E   020C 0001                	BNE @@5
56A0   000D                     	INCR R5		; Increase depth.
56A1   0378 010B                @@5:	CMPI #TOKEN_ELSE,R0
56A3   022C 0010                	BNE @@6
56A5   0015                     	DECR R5		; Decrease depth.
56A6   022C 0013                	BNE @@6
56A8   02B5                     	PULR R5
56A9   0220 01C7                	B bas_execute

56AB   0014                     @@4:	DECR R4
56AC   02B7                     	PULR PC
                                	ENDP

                                	;
                                	; Get next point for execution
                                	;
0x56AD                          get_next_point:	PROC
56AD   0275                     	PSHR R5
56AE   0281 033E                	MVI bas_curline,R1
0x56B0                          @@2:
56B0   02A0                     	MVI@ R4,R0
56B1   0080                     	TSTR R0
56B2   0204 000A                	BEQ @@1
56B4   0378 0020                	CMPI #32,R0
56B6   0224 0007                	BEQ @@2
56B8   0378 0100                	CMPI #TOKEN_COLON,R0
56BA   0204 000E                	BEQ @@3
56BC   0200 0007                	B @@4

56BE   02A1                     @@1:	MVI@ R4,R1
56BF   0089                     	TSTR R1		; No more lines?
56C0   0204 0003                	BEQ @@4
56C2   000C                     	INCR R4
56C3   0200 0005                	B @@3
0x56C5                          @@4:
56C5   02B8 0001                	MVII #ERR_SYNTAX,R0
56C7   0004 0150 03BB           	CALL bas_error
0x56CA                          @@3:
56CA   02B7                     	PULR PC
                                	ENDP

                                	;
                                	; Get variable address
                                	;
0x56CB                          get_var_addr:	PROC
56CB   0378 0041                	CMPI #$41,R0
56CD   0209 0043                	BNC @@1
56CF   0378 005B                	CMPI #$5B,R0
56D1   0201 003F                	BC @@1
0x56D3                          @@0:
56D3   0275                     	PSHR R5
56D4   0082                     	MOVR R0,R2
56D5   0004 0150 03B5           	CALL get_next
56D8   0378 0028                	CMPI #$28,R0		; Array?
56DA   020C 002E                	BNE @@2			; No, jump.
56DC   0272                     	PSHR R2
56DD   0004 0158 038A           	CALL bas_expr
56E0   0090                     	MOVR R2,R0
56E1   0099                     	MOVR R3,R1
56E2   0004 0160 0344           	CALL fp2uint
56E5   02B2                     	PULR R2
56E6   0270                     	PSHR R0
56E7   0004 0150 03B5           	CALL get_next
56EA   0378 0029                	CMPI #$29,R0
56EC   020C 0024                	BNE @@1
56EE   0274                     	PSHR R4
56EF   0283 0342                	MVI bas_arrays,R3
56F1   029C                     @@3:	MVI@ R3,R4
56F2   00A4                     	TSTR R4
56F3   0204 0022                	BEQ @@5
56F5   035A                     	CMP@ R3,R2
56F6   0204 0007                	BEQ @@4
56F8   000B                     	INCR R3
56F9   0298                     	MVI@ R3,R0
56FA   000B                     	INCR R3
56FB   0048                     	SLL R0,1	; Length x2.
56FC   00C3                     	ADDR R0,R3
56FD   0220 000D                	B @@3

56FF   000B                     @@4:	INCR R3		; Jump over name.
5700   02B4                     	PULR R4		; Restore parsing position.
5701   02B0                     	PULR R0		; Restore desired index.
5702   0358                     	CMP@ R3,R0
5703   0201 0017                	BC @@6
5705   000B                     	INCR R3
5706   0048                     	SLL R0,1
5707   00C3                     	ADDR R0,R3
5708   009D                     	MOVR R3,R5
5709   02B7                     	PULR PC

570A   0014                     @@2:	DECR R4
570B   033A 0041                	SUBI #$41,R2
570D   004A                     	SLL R2,1
570E   02BD 8080                	MVII #variables,R5
5710   00D5                     	ADDR R2,R5
5711   02B7                     	PULR PC

5712   02B8 0001                @@1:	MVII #ERR_SYNTAX,R0
5714   0004 0150 03BB           	CALL bas_error

5717   02B8 000B                @@5:	MVII #ERR_ARRAY,R0
5719   0004 0150 03BB           	CALL bas_error

571C   02B8 000C                @@6:	MVII #ERR_BOUNDS,R0
571E   0004 0150 03BB           	CALL bas_error

                                	ENDP

                                	;
                                	; FOR
                                	;
0x5721                          bas_for:	PROC
5721   0275                     	PSHR R5
5722   0285 033F                	MVI bas_forptr,R5
5724   037D 9EFB                	CMPI #end_for-5,R5
5726   0201 004A                	BC @@1
                                	; Try an assignment
5728   0004 0150 03B5           	CALL get_next
572B   0004 0154 02CB           	CALL get_var_addr
572E   0283 033F                	MVI bas_forptr,R3
5730   025D                     	MVO@ R5,R3		; Take note of the variable.
5731   0275                     	PSHR R5
5732   0004 0150 03B5           	CALL get_next
5735   0378 0125                	CMPI #TOKEN_EQ,R0
5737   020C 003E                	BNE @@2
5739   0004 0158 038A           	CALL bas_expr
573C   02B5                     	PULR R5
573D   026A                     	MVO@ R2,R5		; Assign initial value.
573E   026B                     	MVO@ R3,R5
573F   0004 0150 03B5           	CALL get_next
5742   0378 010D                	CMPI #TOKEN_TO,R0
5744   020C 0031                	BNE @@2
5746   0283 033F                	MVI bas_forptr,R3
5748   000B                     	INCR R3
5749   000B                     	INCR R3
574A   025C                     	MVO@ R4,R3		; Take note of TO expression
574B   0004 0158 038A           	CALL bas_expr		; Evaluate once
574E   0004 0150 03B5           	CALL get_next
5751   0283 033F                	MVI bas_forptr,R3
5753   000B                     	INCR R3
5754   0378 010E                	CMPI #TOKEN_STEP,R0
5756   020C 0006                	BNE @@3
5758   025C                     	MVO@ R4,R3		; Take note of STEP expression
5759   0004 0158 038A           	CALL bas_expr		; Evaluate once
575C   0200 0003                	B @@4

575E   01D2                     @@3:	CLRR R2
575F   025A                     	MVO@ R2,R3		; No STEP expression
5760   0014                     	DECR R4
5761   0274                     @@4:	PSHR R4
5762   0004 0154 02AD           	CALL get_next_point
5765   0283 033F                	MVI bas_forptr,R3
5767   000B                     	INCR R3
5768   000B                     	INCR R3
5769   000B                     	INCR R3
576A   025C                     	MVO@ R4,R3		; Parsing position
576B   000B                     	INCR R3
576C   0259                     	MVO@ R1,R3		; Line 
576D   000B                     	INCR R3
576E   0243 033F                	MVO R3,bas_forptr
5770   02B4                     	PULR R4
5771   02B7                     	PULR PC
0x5772                          @@1:
5772   02B8 0006                	MVII #ERR_FOR,R0
5774   0004 0150 03BB           	CALL bas_error
0x5777                          @@2:
5777   02B8 0001                	MVII #ERR_SYNTAX,R0
5779   0004 0150 03BB           	CALL bas_error
577C   02B7                     	PULR PC
                                	ENDP

                                	;
                                	; NEXT
                                	;
0x577D                          bas_next:	PROC
577D   0275                     	PSHR R5
577E   0285 033F                	MVI bas_forptr,R5
5780   037D 9EC0                	CMPI #start_for,r5
5782   020C 0005                	BNE @@1
0x5784                          @@0:
5784   02B8 0007                	MVII #ERR_NEXT,R0
5786   0004 0150 03BB           	CALL bas_error
5789   0004 0150 03B5           @@1:	CALL get_next
578C   0378 0041                	CMPI #$41,R0		; Variable name?
578E   0209 0014                	BNC @@2
5790   0378 005B                	CMPI #$5B,R0
5792   0201 0010                	BC @@2			; No, jump.
5794   0004 0154 02D3           	CALL get_var_addr.0
5797   0283 033F                	MVI bas_forptr,R3
5799   037B 9EC0                @@3:	CMPI #start_for,R3
579B   0224 0018                	BEQ @@0
579D   033B 0005                	SUBI #5,R3
579F   035D                     	CMP@ R3,R5		; Find in FOR stack
57A0   022C 0008                	BNE @@3
57A2   0200 0008                	B @@4

57A4   0014                     @@2:	DECR R4
57A5   0283 033F                	MVI bas_forptr,R3	; Use most recent FOR.
57A7   0013                     	DECR R3
57A8   0013                     	DECR R3
57A9   0013                     	DECR R3
57AA   0013                     	DECR R3
57AB   0013                     	DECR R3
57AC   0274                     @@4:	PSHR R4
57AD   009D                     	MOVR R3,R5
57AE   02AB                     	MVI@ R5,R3		; Variable address.
57AF   0273                     	PSHR R3
57B0   0298                     	MVI@ R3,R0		; Read value
57B1   000B                     	INCR R3
57B2   0299                     	MVI@ R3,R1
57B3   02AC                     	MVI@ R5,R4		; Read STEP value.
57B4   0275                     	PSHR R5
57B5   00A4                     	TSTR R4
57B6   0204 0009                	BEQ @@5
57B8   0270                     	PSHR R0
57B9   0271                     	PSHR R1
57BA   0004 0158 038A           	CALL bas_expr
57BD   02B1                     	PULR R1
57BE   02B0                     	PULR R0
57BF   0200 0003                	B @@6
0x57C1                          @@5:
57C1   01D2                     	CLRR R2
57C2   02BB 003F                	MVII #$003F,R3		; 1.0
0x57C4                          @@6:
57C4   009C                     	MOVR R3,R4
57C5   03BC 0080                	ANDI #$80,R4
57C7   0244 010B                	MVO R4,temp1
57C9   0004 0160 014F           	CALL fpadd
57CC   02B5                     	PULR R5
57CD   02B3                     	PULR R3
57CE   0258                     	MVO@ R0,R3		; Save new value.
57CF   000B                     	INCR R3
57D0   0259                     	MVO@ R1,R3
57D1   02AC                     	MVI@ R5,R4		; Read TO value.
57D2   0275                     	PSHR R5
57D3   0270                     	PSHR R0
57D4   0271                     	PSHR R1
57D5   0004 0158 038A           	CALL bas_expr
57D8   02B1                     	PULR R1
57D9   02B0                     	PULR R0
57DA   0284 010B                	MVI temp1,R4
57DC   00A4                     	TSTR R4
57DD   0204 0007                	BEQ @@7
57DF   0004 0160 0268           	CALL fpcomp
57E2   0201 0009                	BC @@8
57E4   0200 0010                	B @@9	
0x57E6                          @@7:
57E6   0004 0160 0268           	CALL fpcomp
57E9   0204 0002                	BEQ @@8
57EB   0201 0009                	BC @@9

57ED   02B5                     @@8:	PULR R5
57EE   02B4                     	PULR R4		; Previous parsing position.
57EF   02AC                     	MVI@ R5,R4
57F0   02A9                     	MVI@ R5,R1
57F1   0241 033E                	MVO R1,bas_curline
57F3   02B5                     	PULR R5
57F4   0220 0312                	B bas_execute

57F6   02B5                     @@9:	PULR R5
57F7   02B4                     	PULR R4
57F8   0015                     	DECR R5
57F9   0015                     	DECR R5
57FA   0015                     	DECR R5
57FB   0245 033F                	MVO R5,bas_forptr
57FD   02B7                     	PULR PC

                                	ENDP

                                	;
                                	; GOSUB
                                	;
0x57FE                          bas_gosub:	PROC
57FE   0275                     	PSHR R5
                                	; !!! Change for expression evaluation
57FF   01D2                     	CLRR R2
5800   0004 0150 03B5           	CALL get_next
5803   0378 0030                @@1:	CMPI #$30,R0
5805   0209 000E                	BNC @@2
5807   0378 003A                	CMPI #$3A,R0
5809   0201 000A                	BC @@2
580B   0338 0030                	SUBI #$30,R0
580D   0091                     	MOVR R2,R1
580E   004E                     	SLL R2,2
580F   00CA                     	ADDR R1,R2		; x5
5810   00D2                     	ADDR R2,R2		; x10
5811   00C2                     	ADDR R0,R2
5812   02A0                     	MVI@ R4,R0
5813   0220 0011                	B @@1

5815   0014                     @@2:	DECR R4
5816   0004 0154 02AD           	CALL get_next_point
5819   0285 0340                	MVI bas_gosubptr,R5
581B   037D 9EBE                	CMPI #end_gosub-2,R5
581D   0201 0023                	BC @@5
581F   026C                     	MVO@ R4,R5
5820   0269                     	MVO@ R1,R5
5821   0245 0340                	MVO R5,bas_gosubptr
5823   0090                     	MOVR R2,R0
5824   0004 0150 0366           	CALL line_search
5827   0148                     	CMPR R1,R0
5828   0204 0005                	BEQ @@3
582A   02B8 0003                	MVII #ERR_LINE,R0
582C   0004 0150 03BB           	CALL bas_error
0x582F                          @@3:
582F   0274                     	PSHR R4
5830   0004 015C 03FB           	CALL SCAN_KBD
5833   02B4                     	PULR R4
5834   0378 001B                	CMPI #KEY.ESC,R0
5836   020C 0005                	BNE @@4
5838   02B8 0002                	MVII #ERR_STOP,R0
583A   0004 0150 03BB           	CALL bas_error
0x583D                          @@4:
583D   02BE 02F0                	MVII #STACK,R6
583F   0220 02B4                	B bas_run.1
5841   02B7                     	PULR PC

5842   02B8 0004                @@5:	MVII #ERR_GOSUB,R0
5844   0004 0150 03BB           	CALL bas_error
                                	ENDP

                                	;
                                	; RETURN
                                	;
0x5847                          bas_return:	PROC
5847   0275                     	PSHR R5
5848   0285 0340                	MVI bas_gosubptr,R5
584A   037D 9E80                	CMPI #start_gosub,r5
584C   020C 0005                	BNE @@1
584E   02B8 0005                	MVII #ERR_RETURN,R0
5850   0004 0150 03BB           	CALL bas_error
5853   0015                     @@1:	DECR R5
5854   0015                     	DECR R5
5855   0245 0340                	MVO R5,bas_gosubptr
5857   02AC                     	MVI@ R5,R4
5858   02A9                     	MVI@ R5,R1
5859   0241 033E                	MVO R1,bas_curline
585B   02B5                     	PULR R5
585C   0220 037A                	B bas_execute
                                	ENDP

                                	;
                                	; REM
                                	;
0x585E                          bas_rem:	PROC
585E   02A0                     @@1:	MVI@ R4,R0
585F   0080                     	TSTR R0
5860   022C 0003                	BNE @@1
5862   0014                     	DECR R4
5863   00AF                     	MOVR R5,PC
                                	ENDP

                                	;
                                	; Locate the first DATA statement in the program
                                	;
0x5864                          data_locate:	PROC
5864   0275                     	PSHR R5
5865   02BC 80C0                	MVII #program_start,R4
5867   02A0                     @@3:	MVI@ R4,R0
5868   000C                     	INCR R4
5869   0080                     	TSTR R0
586A   0204 000A                	BEQ @@1
586C   02A0                     @@2:	MVI@ R4,R0
586D   0080                     	TSTR R0
586E   0224 0008                	BEQ @@3
5870   0378 0115                	CMPI #TOKEN_DATA,R0
5872   022C 0007                	BNE @@2
5874   00A0                     	MOVR R4,R0
5875   02B7                     	PULR PC

5876   01C0                     @@1:	CLRR R0
5877   02B7                     	PULR PC
                                	ENDP

                                	;
                                	; RESTORE
                                	;
0x5878                          bas_restore:	PROC
5878   0275                     	PSHR R5
5879   0004 0150 03B5           	CALL get_next
587C   0378 0030                	CMPI #$30,R0
587E   0209 002A                	BNC @@1
5880   0378 003A                	CMPI #$3A,R0
5882   0201 0026                	BC @@1
5884   01D2                     	CLRR R2
0x5885                          @@4:
5885   0338 0030                	SUBI #$30,R0
5887   0091                     	MOVR R2,R1
5888   004E                     	SLL R2,2
5889   00CA                     	ADDR R1,R2		; x5
588A   00D2                     	ADDR R2,R2		; x10
588B   00C2                     	ADDR R0,R2
588C   02A0                     	MVI@ R4,R0
588D   0378 0030                	CMPI #$30,R0
588F   0209 0004                	BNC @@3
5891   0378 003A                	CMPI #$3A,R0
5893   0229 000F                	BNC @@4
5895   0014                     @@3:	DECR R4
5896   0274                     	PSHR R4
5897   0090                     	MOVR R2,R0
5898   0004 0150 0366           	CALL line_search
589B   0148                     	CMPR R1,R0
589C   020C 001E                	BNE @@5		; Jump if not found.
589E   000C                     	INCR R4
589F   000C                     	INCR R4
0x58A0                          @@7:
58A0   02A0                     	MVI@ R4,R0
58A1   0080                     	TSTR R0
58A2   0204 0013                	BEQ @@6
58A4   0378 0115                	CMPI #TOKEN_DATA,R0
58A6   022C 0007                	BNE @@7
58A8   0200 0009                	B @@2
                                	; No line number
58AA   0014                     @@1:	DECR R4
58AB   0274                     	PSHR R4
58AC   0004 0158 0064           	CALL data_locate
58AF   0080                     	TSTR R0
58B0   0204 0005                	BEQ @@6
58B2   0084                     	MOVR R0,R4
58B3   0244 0341                @@2:	MVO R4,bas_dataptr
58B5   02B4                     	PULR R4
58B6   02B7                     	PULR PC

0x58B7                          @@6:
58B7   02B8 0008                	MVII #ERR_DATA,R0
58B9   0004 0150 03BB           	CALL bas_error
0x58BC                          @@5:
58BC   02B8 0003                	MVII #ERR_LINE,R0
58BE   0004 0150 03BB           	CALL bas_error
                                	ENDP

                                	;
                                	; READ
                                	;
0x58C1                          bas_read:	PROC
58C1   0275                     	PSHR R5
0x58C2                          @@12:
58C2   0004 0150 03B5           	CALL get_next
58C5   0378 0041                	CMPI #$41,R0		; Variable name?
58C7   0209 005D                	BNC @@2
58C9   0378 005B                	CMPI #$5B,R0
58CB   0201 0059                	BC @@2			; No, jump.
58CD   0004 0154 02D3           	CALL get_var_addr.0
58D0   0274                     	PSHR R4
58D1   0275                     	PSHR R5
58D2   0284 0341                	MVI bas_dataptr,R4
58D4   00A4                     	TSTR R4
58D5   0204 004A                	BEQ @@6
58D7   02A0                     @@8	MVI@ R4,R0
58D8   0080                     	TSTR R0		; End of line found?
58D9   0204 0035                	BEQ @@5
58DB   0378 0020                	CMPI #$20,R0	; Avoid spaces
58DD   0224 0007                	BEQ @@8
58DF   0378 002D                	CMPI #$2D,R0
58E1   0204 000C                	BEQ @@3
58E3   0378 0030                	CMPI #$30,R0
58E5   0209 0029                	BNC @@4
58E7   0378 003A                	CMPI #$3A,R0
58E9   0209 0004                	BNC @@3
58EB   0378 002E                	CMPI #$2E,R0
58ED   0204 0000                	BEQ @@3

                                	; Number identified.
58EF   0004 015C 0275           @@3:	CALL parse_number
58F2   02B5                     	PULR R5
58F3   0268                     	MVO@ R0,R5	; Save into variable
58F4   0269                     	MVO@ R1,R5
0x58F5                          @@11:
58F5   02A0                     	MVI@ R4,R0
58F6   0080                     	TSTR R0
58F7   0204 000A                	BEQ @@9
58F9   0378 0020                	CMPI #$20,R0
58FB   0224 0007                	BEQ @@11
58FD   0378 002C                	CMPI #$2C,R0
58FF   022C 000B                	BNE @@11
5901   0200 0001                	B @@10
5903   0014                     @@9:	DECR R4
5904   0244 0341                @@10:	MVO R4,bas_dataptr
5906   02B4                     	PULR R4
5907   0004 0150 03B5           	CALL get_next
590A   0378 002C                	CMPI #$2C,R0
590C   0224 004B                	BEQ @@12
590E   0014                     	DECR R4
590F   02B7                     	PULR PC

0x5910                          @@4:
                                	; End of line
5910   02A0                     @@5:	MVI@ R4,R0
5911   0080                     	TSTR R0		; End of program?
5912   0204 000D                	BEQ @@6
5914   000C                     	INCR R4
5915   02A0                     @@7:	MVI@ R4,R0
5916   0080                     	TSTR R0
5917   0224 0008                	BEQ @@5
5919   0378 0115                	CMPI #TOKEN_DATA,R0
591B   022C 0007                	BNE @@7
591D   0220 0047                	B @@8

591F   02B5                     	PULR R5
5920   02B4                     	PULR R4

5921   02B8 0008                @@6:	MVII #ERR_DATA,R0
5923   0004 0150 03BB           	CALL bas_error

5926   02B8 0001                @@2:	MVII #ERR_SYNTAX,R0
5928   0004 0150 03BB           	CALL bas_error
592B   02B7                     	PULR PC
                                	ENDP

                                	;
                                	; DATA
                                	;
                                	; On execution it is ignored.
                                	;
0x592C                          bas_data:	PROC
592C   02A0                     @@1:	MVI@ R4,R0
592D   0378 0100                	CMPI #TOKEN_COLON,R0
592F   0204 0003                	BEQ @@2
5931   0080                     	TSTR R0
5932   022C 0007                	BNE @@1
0x5934                          @@2:
5934   0014                     	DECR R4
5935   00AF                     	MOVR R5,PC
                                	ENDP

                                	;
                                	; DIM
                                	;
0x5936                          bas_dim:	PROC
5936   0275                     	PSHR R5
5937   0004 0150 03B5           	CALL get_next
593A   0378 0041                	CMPI #$41,R0	; Variable name?
593C   0209 0055                	BNC @@1
593E   0378 005B                	CMPI #$5B,R0
5940   0201 0051                	BC @@1		; No, jump.
5942   0270                     	PSHR R0
5943   0004 0150 03B5           	CALL get_next
5946   0378 0028                	CMPI #$28,R0
5948   020C 0049                	BNE @@1
594A   0004 0150 03B5           	CALL get_next
594D   0378 0030                	CMPI #$30,R0
594F   0209 0042                	BNC @@1
5951   0378 003A                	CMPI #$3A,R0
5953   0201 003E                	BC @@1
5955   0004 015C 025E           	CALL parse_integer
5958   0008                     	INCR R0		; Count zero.
5959   0270                     	PSHR R0
595A   0004 0150 03B5           	CALL get_next
595D   0378 0029                	CMPI #$29,R0
595F   020C 0032                	BNE @@1
5961   02B1                     	PULR R1		; Length.
5962   02B2                     	PULR R2		; Name.
                                	;
                                	; Search for previous definition.
                                	;
5963   0274                     	PSHR R4
5964   0283 0342                	MVI bas_arrays,R3
5966   029C                     @@5:	MVI@ R3,R4
5967   00A4                     	TSTR R4
5968   0204 000A                	BEQ @@4
596A   035A                     	CMP@ R3,R2
596B   0204 0021                	BEQ @@2
596D   000B                     	INCR R3
596E   0298                     	MVI@ R3,R0
596F   000B                     	INCR R3
5970   0048                     	SLL R0,1	; Length x2.
5971   00C3                     	ADDR R0,R3
5972   0220 000D                	B @@5

5974   0098                     @@4:	MOVR R3,R0
5975   02F8 0003                	ADDI #3,R0
5977   00C8                     	ADDR R1,R0
5978   00C8                     	ADDR R1,R0
5979   0340 0344                	CMP bas_memlimit,R0
597B   0201 000C                	BC @@3
597D   025A                     	MVO@ R2,R3
597E   000B                     	INCR R3
597F   0259                     	MVO@ R1,R3
5980   000B                     	INCR R3
5981   0049                     	SLL R1,1	; Length x2.
5982   00CB                     	ADDR R1,R3
5983   01C9                     	CLRR R1
5984   0259                     	MVO@ R1,R3
5985   0243 0343                	MVO R3,bas_last_array
5987   02B4                     	PULR R4
5988   02B7                     	PULR PC

5989   02B8 000A                @@3:	MVII #ERR_MEMORY,R0
598B   0004 0150 03BB           	CALL bas_error

598E   02B8 0009                @@2: 	MVII #ERR_DIM,R0
5990   0004 0150 03BB           	CALL bas_error

5993   02B8 0001                @@1:	MVII #ERR_SYNTAX,R0
5995   0004 0150 03BB           	CALL bas_error

                                	ENDP

                                	;
                                	; MODE
                                	;
0x5998                          bas_mode:	PROC
5998   0275                     	PSHR R5
5999   0004 0158 0380           	CALL bas_expr_int
599C   0378 0002                	CMPI #2,R0
599E   0201 0011                	BC @@1
59A0   0240 0104                	MVO R0,_mode
59A2   0004 0150 03B5           	CALL get_next
59A5   0378 002C                	CMPI #$2C,R0
59A7   020C 0006                	BNE @@2
59A9   0004 0158 0380           	CALL bas_expr_int
59AC   0240 0347                	MVO R0,_mode_color
59AE   02B7                     	PULR PC

59AF   0014                     @@2:	DECR R4
59B0   02B7                     	PULR PC

59B1   02B8 000C                @@1:	MVII #ERR_BOUNDS,R0
59B3   0004 0150 03BB           	CALL bas_error
                                	ENDP

                                	;
                                	; COLOR
                                	;
0x59B6                          bas_color:	PROC
59B6   0275                     	PSHR R5
59B7   0004 0158 0380           	CALL bas_expr_int
59BA   0240 033C                	MVO R0,bas_curcolor
59BC   02B7                     	PULR PC
                                	ENDP

                                	;
                                	; DEFINE
                                	;
0x59BD                          bas_define:	PROC
59BD   0275                     	PSHR R5
59BE   0004 0158 0380           	CALL bas_expr_int
59C1   0270                     	PSHR R0
59C2   0004 0150 03B5           	CALL get_next
59C5   0378 002C                	CMPI #$2C,R0
59C7   020C 003F                	BNE @@1
59C9   0004 0150 03B5           	CALL get_next
59CC   0378 0022                	CMPI #$22,R0
59CE   020C 0038                	BNE @@1
59D0   0283 0343                	MVI bas_last_array,R3
59D2   000B                     	INCR R3
0x59D3                          @@0:	
59D3   0004 0158 020D           	CALL @@convert_hex
59D6   0201 001D                	BC @@2
59D8   004C                     	SLL R0,2
59D9   004C                     	SLL R0,2
59DA   0082                     	MOVR R0,R2

59DB   0004 0158 020D           	CALL @@convert_hex
59DE   0201 0015                	BC @@2
59E0   00C2                     	ADDR R0,R2

59E1   0042                     	SWAP R2
59E2   0004 0158 020D           	CALL @@convert_hex
59E5   0201 000E                	BC @@2
59E7   004C                     	SLL R0,2
59E8   004C                     	SLL R0,2
59E9   00C2                     	ADDR R0,R2

59EA   0004 0158 020D           	CALL @@convert_hex
59ED   0201 0006                	BC @@2
59EF   00C2                     	ADDR R0,R2
59F0   0042                     	SWAP R2

59F1   025A                     	MVO@ R2,R3
59F2   000B                     	INCR R3
59F3   0220 0021                	B @@0

59F5   0378 0022                @@2:	CMPI #$22,R0
59F7   020C 000F                	BNE @@1

59F9   0282 0343                	MVI bas_last_array,R2
59FB   000A                     	INCR R2
59FC   0113                     	SUBR R2,R3
59FD   0067                     	SLR R3,2
59FE   0204 0008                	BEQ @@1
5A00   0243 0108                	MVO R3,_gram_total
5A02   0242 0348                	MVO R2,_gram_bitmap
5A04   02B0                     	PULR R0
5A05   0240 0107                	MVO R0,_gram_target

5A07   02B7                     	PULR PC

5A08   02B8 0001                @@1:	MVII #ERR_SYNTAX,R0
5A0A   0004 0150 03BB           	CALL bas_error

0x5A0D                          @@convert_hex:
5A0D   02A0                     	MVI@ R4,R0
5A0E   0378 0061                	CMPI #$61,R0
5A10   0209 0002                	BNC @@c1
5A12   0338 0020                	SUBI #$20,R0
5A14   0378 0030                @@c1:	CMPI #$30,R0
5A16   0209 0016                	BNC @@c2
5A18   0378 0047                	CMPI #$47,R0
5A1A   0201 0012                	BC @@c2
5A1C   0378 003A                	CMPI #$3A,R0
5A1E   0209 0004                	BNC @@c3
5A20   0378 0041                	CMPI #$41,R0
5A22   0209 000A                	BNC @@c2
5A24   0338 0030                @@c3:	SUBI #$30,R0
5A26   0378 000A                	CMPI #10,R0
5A28   0209 0002                	BNC @@c4
5A2A   0338 0007                	SUBI #7,R0
0x5A2C                          @@c4:
5A2C   0006                     	CLRC
5A2D   00AF                     	MOVR R5,PC

5A2E   0007                     @@c2:	SETC
5A2F   00AF                     	MOVR R5,PC

                                	ENDP

                                	;
                                	; SPRITE
                                	;
0x5A30                          bas_sprite:	PROC
5A30   0275                     	PSHR R5
5A31   0004 0158 0380           	CALL bas_expr_int
5A34   0378 0008                	CMPI #8,R0
5A36   0201 0050                	BC @@1
5A38   02F8 0322                	ADDI #_mobs,R0
5A3A   0270                     	PSHR R0
5A3B   0004 0150 03B5           	CALL get_next
5A3E   0378 002C                	CMPI #$2C,R0
5A40   020C 004B                	BNE @@2

5A42   0004 0150 03B5           	CALL get_next
5A45   0378 002C                	CMPI #$2C,R0
5A47   0204 0015                	BEQ @@4
5A49   0014                     	DECR R4
5A4A   0004 0158 0380           	CALL bas_expr_int
5A4D   02B3                     	PULR R3
5A4E   0273                     	PSHR R3
5A4F   0258                     	MVO@ R0,R3
5A50   0004 0150 03B5           	CALL get_next
5A53   0378 0100                	CMPI #TOKEN_COLON,R0
5A55   0204 002E                	BEQ @@3
5A57   0080                     	TSTR R0
5A58   0204 002B                	BEQ @@3
5A5A   0378 002C                	CMPI #$2C,R0
5A5C   020C 002F                	BNE @@2
0x5A5E                          @@4:
5A5E   0004 0150 03B5           	CALL get_next
5A61   0378 002C                	CMPI #$2C,R0
5A63   0204 0017                	BEQ @@5
5A65   0014                     	DECR R4
5A66   0004 0158 0380           	CALL bas_expr_int
5A69   02B3                     	PULR R3
5A6A   0273                     	PSHR R3
5A6B   02FB 0008                	ADDI #8,R3
5A6D   0258                     	MVO@ R0,R3
5A6E   0004 0150 03B5           	CALL get_next
5A71   0378 0100                	CMPI #TOKEN_COLON,R0
5A73   0204 0010                	BEQ @@3
5A75   0080                     	TSTR R0
5A76   0204 000D                	BEQ @@3
5A78   0378 002C                	CMPI #$2C,R0
5A7A   020C 0011                	BNE @@2
0x5A7C                          @@5:
5A7C   0004 0158 0380           	CALL bas_expr_int
5A7F   02B3                     	PULR R3
5A80   0273                     	PSHR R3
5A81   02FB 0010                	ADDI #16,R3
5A83   0258                     	MVO@ R0,R3
5A84   000F                     	INCR R7

5A85   0014                     @@3:	DECR R4
5A86   02B3                     	PULR R3
5A87   02B7                     	PULR PC

5A88   02B8 000C                @@1:	MVII #ERR_BOUNDS,R0
5A8A   0004 0150 03BB           	CALL bas_error

5A8D   02B8 0001                @@2:	MVII #ERR_SYNTAX,R0
5A8F   0004 0150 03BB           	CALL bas_error
                                	ENDP

                                	;
                                	; WAIT
                                	;
0x5A92                          bas_wait:	PROC
5A92   0275                     	PSHR R5
0x5A93                          @@1:
5A93   0280 0102                	MVI _int,R0
5A95   0080                     	TSTR R0
5A96   0224 0004                	BEQ @@1
5A98   01C0                     	CLRR R0
5A99   0240 0102                	MVO R0,_int
5A9B   02B7                     	PULR PC
                                	ENDP

                                	;
                                	; SOUND
                                	;
0x5A9C                          bas_sound:	PROC
5A9C   0275                     	PSHR R5
5A9D   0004 0158 0380           	CALL bas_expr_int
5AA0   0270                     	PSHR R0
5AA1   0004 0150 03B5           	CALL get_next
5AA4   0378 002C                	CMPI #$2C,R0
5AA6   020C 001D                	BNE @@5
5AA8   0004 0150 03B5           	CALL get_next
5AAB   0378 002C                	CMPI #$2C,R0
5AAD   0204 0001                	BEQ @@12
5AAF   0014                     	DECR R4
0x5AB0                          @@12:
5AB0   02B1                     	PULR R1
5AB1   0089                     	TSTR R1
5AB2   0204 0016                	BEQ @@0
5AB4   0011                     	DECR R1
5AB5   0204 002C                	BEQ @@1
5AB7   0011                     	DECR R1
5AB8   0204 0042                	BEQ @@2
5ABA   0011                     	DECR R1
5ABB   0204 0058                	BEQ @@3
5ABD   0011                     	DECR R1
5ABE   0204 006E                	BEQ @@4
5AC0   02B8 000C                	MVII #ERR_BOUNDS,R0
5AC2   0004 0150 03BB           	CALL bas_error

5AC5   02B8 0001                @@5:	MVII #ERR_SYNTAX,R0
5AC7   0004 0150 03BB           	CALL bas_error

                                	; SOUND 0,freq,vol
5ACA   0378 002C                @@0:	CMPI #$2C,R0
5ACC   0204 000F                	BEQ @@6
5ACE   0004 0158 0380           	CALL bas_expr_int
5AD1   0240 01F0                	MVO R0,$01f0
5AD3   0040                     	SWAP R0
5AD4   0240 01F4                	MVO R0,$01F4
5AD6   0004 0150 03B5           	CALL get_next
5AD9   0378 002C                	CMPI #$2C,R0
5ADB   020C 0067                	BNE @@11
0x5ADD                          @@6:
5ADD   0004 0158 0380           	CALL bas_expr_int
5AE0   0240 01FB                	MVO R0,$01FB
5AE2   02B7                     	PULR PC

                                	; SOUND 1,freq,vol
5AE3   0378 002C                @@1:	CMPI #$2C,R0
5AE5   0204 000F                	BEQ @@7
5AE7   0004 0158 0380           	CALL bas_expr_int
5AEA   0240 01F1                	MVO R0,$01F1
5AEC   0040                     	SWAP R0
5AED   0240 01F5                	MVO R0,$01F5
5AEF   0004 0150 03B5           	CALL get_next
5AF2   0378 002C                	CMPI #$2C,R0
5AF4   020C 004E                	BNE @@11
0x5AF6                          @@7:
5AF6   0004 0158 0380           	CALL bas_expr_int
5AF9   0240 01FC                	MVO R0,$01fc
5AFB   02B7                     	PULR PC

                                	; SOUND 2,freq,vol
5AFC   0378 002C                @@2:	CMPI #$2C,R0
5AFE   0204 000F                	BEQ @@8
5B00   0004 0158 0380           	CALL bas_expr_int
5B03   0240 01F2                	MVO R0,$01F2
5B05   0040                     	SWAP R0
5B06   0240 01F6                	MVO R0,$01F6
5B08   0004 0150 03B5           	CALL get_next
5B0B   0378 002C                	CMPI #$2C,R0
5B0D   020C 0035                	BNE @@11
0x5B0F                          @@8:
5B0F   0004 0158 0380           	CALL bas_expr_int
5B12   0240 01FD                	MVO R0,$01fd
5B14   02B7                     	PULR PC

                                	; SOUND 3,freq,env
5B15   0378 002C                @@3:	CMPI #$2C,R0
5B17   0204 000F                	BEQ @@9
5B19   0004 0158 0380           	CALL bas_expr_int
5B1C   0240 01F3                	MVO R0,$01F3
5B1E   0040                     	SWAP R0
5B1F   0240 01F7                	MVO R0,$01F7
5B21   0004 0150 03B5           	CALL get_next
5B24   0378 002C                	CMPI #$2C,R0
5B26   020C 001C                	BNE @@11
0x5B28                          @@9:
5B28   0004 0158 0380           	CALL bas_expr_int
5B2B   0240 01FA                	MVO R0,$01fa
5B2D   02B7                     	PULR PC

                                	; SOUND 4,noise,mix
5B2E   0378 002C                @@4:	CMPI #$2C,R0
5B30   0204 000C                	BEQ @@10
5B32   0004 0158 0380           	CALL bas_expr_int
5B35   0240 01F9                	MVO R0,$01F9
5B37   0004 0150 03B5           	CALL get_next
5B3A   0378 002C                	CMPI #$2C,R0
5B3C   020C 0006                	BNE @@11
0x5B3E                          @@10:
5B3E   0004 0158 0380           	CALL bas_expr_int
5B41   0240 01F8                	MVO R0,$01f8
5B43   02B7                     	PULR PC

5B44   0014                     @@11:	DECR R4
5B45   02B7                     	PULR PC
                                	ENDP

                                	;
                                	; BORDER
                                	;
0x5B46                          bas_border:	PROC
5B46   0275                     	PSHR R5
5B47   0004 0158 0380           	CALL bas_expr_int
5B4A   0378 0010                	CMPI #16,R0
5B4C   0201 0003                	BC @@1
5B4E   0240 0105                	MVO R0,_border_color
5B50   02B7                     	PULR PC

5B51   02B8 000C                @@1:	MVII #ERR_BOUNDS,R0
5B53   0004 0150 03BB           	CALL bas_error
                                	ENDP

                                	;
                                	; BK(v) = v
                                	;
0x5B56                          bas_bk:	PROC
5B56   0275                     	PSHR R5
5B57   0004 015C 0113           	CALL bas_expr_paren
5B5A   0004 0160 0322           	CALL fp2int
5B5D   0378 0240                	CMPI #$240,R0
5B5F   0201 0010                	BC @@1
5B61   0270                     	PSHR R0
5B62   0004 0150 03B5           	CALL get_next
5B65   0378 0125                	CMPI #TOKEN_EQ,R0
5B67   020C 000D                	BNE @@2
5B69   0004 0158 0380           	CALL bas_expr_int
5B6C   02B5                     	PULR R5
5B6D   02FD 0200                	ADDI #$0200,R5
5B6F   0268                     	MVO@ R0,R5
5B70   02B7                     	PULR PC

5B71   02B8 000C                @@1:	MVII #ERR_BOUNDS,R0
5B73   0004 0150 03BB           	CALL bas_error

5B76   02B8 0001                @@2:	MVII #ERR_SYNTAX,R0
5B78   0004 0150 03BB           	CALL bas_error
                                	ENDP

                                	;
                                	; Syntax error (reserved keyword at wrong place) 
                                	;
0x5B7B                          bas_syntax_error:	PROC
5B7B   02B8 0001                	MVII #ERR_SYNTAX,R0
5B7D   0004 0150 03BB           	CALL bas_error
                                	ENDP

                                	;
                                	; Expresion evaluation and conversion to integer
                                	;
0x5B80                          bas_expr_int:	PROC
5B80   0275                     	PSHR R5
5B81   0004 0158 038A           	CALL bas_expr
5B84   0090                     	MOVR R2,R0
5B85   0099                     	MOVR R3,R1
5B86   0004 0160 0322           	CALL fp2int
5B89   02B7                     	PULR PC
                                	ENDP

                                	;
                                	; Expression evaluation
                                	;
0x5B8A                          bas_expr:	PROC
5B8A   0275                     	PSHR R5
5B8B   0004 0158 03B0           	CALL bas_expr1
5B8E   0004 0150 03B5           	CALL get_next
5B91   0378 0120                	CMPI #TOKEN_OR,R0
5B93   020C 0019                	BNE @@1
5B95   0090                     	MOVR R2,R0
5B96   0099                     	MOVR R3,R1
5B97   0004 0160 0322           	CALL fp2int
5B9A   0270                     	PSHR R0
5B9B   0004 0158 03B0           	CALL bas_expr1
5B9E   0090                     	MOVR R2,R0
5B9F   0099                     	MOVR R3,R1
5BA0   0004 0160 0322           	CALL fp2int
5BA3   02B1                     	PULR R1
5BA4   0019                     	COMR R1
5BA5   0188                     	ANDR R1,R0
5BA6   0019                     	COMR R1
5BA7   00C8                     	ADDR R1,R0
5BA8   0004 0160 0285           	CALL fpfromint
5BAB   0082                     	MOVR R0,R2
5BAC   008B                     	MOVR R1,R3
5BAD   02B7                     	PULR PC

5BAE   0014                     @@1:	DECR R4
5BAF   02B7                     	PULR PC
                                	ENDP

0x5BB0                          bas_expr1:	PROC
5BB0   0275                     	PSHR R5
5BB1   0004 0158 03D3           	CALL bas_expr2
5BB4   0004 0150 03B5           	CALL get_next
5BB7   0378 0121                	CMPI #TOKEN_XOR,R0
5BB9   020C 0016                	BNE @@1
5BBB   0090                     	MOVR R2,R0
5BBC   0099                     	MOVR R3,R1
5BBD   0004 0160 0322           	CALL fp2int
5BC0   0270                     	PSHR R0
5BC1   0004 0158 03D3           	CALL bas_expr2
5BC4   0090                     	MOVR R2,R0
5BC5   0099                     	MOVR R3,R1
5BC6   0004 0160 0322           	CALL fp2int
5BC9   02B1                     	PULR R1
5BCA   01C8                     	XORR R1,R0
5BCB   0004 0160 0285           	CALL fpfromint
5BCE   0082                     	MOVR R0,R2
5BCF   008B                     	MOVR R1,R3
5BD0   02B7                     	PULR PC

5BD1   0014                     @@1:	DECR R4
5BD2   02B7                     	PULR PC
                                	ENDP

0x5BD3                          bas_expr2:	PROC
5BD3   0275                     	PSHR R5
5BD4   0004 0158 03F6           	CALL bas_expr3
5BD7   0004 0150 03B5           	CALL get_next
5BDA   0378 011E                	CMPI #TOKEN_AND,R0
5BDC   020C 0016                	BNE @@1
5BDE   0090                     	MOVR R2,R0
5BDF   0099                     	MOVR R3,R1
5BE0   0004 0160 0322           	CALL fp2int
5BE3   0270                     	PSHR R0
5BE4   0004 0158 03F6           	CALL bas_expr3
5BE7   0090                     	MOVR R2,R0
5BE8   0099                     	MOVR R3,R1
5BE9   0004 0160 0322           	CALL fp2int
5BEC   02B1                     	PULR R1
5BED   0188                     	ANDR R1,R0
5BEE   0004 0160 0285           	CALL fpfromint
5BF1   0082                     	MOVR R0,R2
5BF2   008B                     	MOVR R1,R3
5BF3   02B7                     	PULR PC

5BF4   0014                     @@1:	DECR R4
5BF5   02B7                     	PULR PC
                                	ENDP

0x5BF6                          bas_expr3:	PROC
5BF6   0275                     	PSHR R5
5BF7   0004 015C 0086           	CALL bas_expr4
5BFA   0004 0150 03B5           	CALL get_next
5BFD   0378 0122                	CMPI #TOKEN_LE,R0
5BFF   0209 007C                	BNC @@1
5C01   0378 0128                	CMPI #TOKEN_GT+1,R0
5C03   0201 0078                	BC @@1
5C05   0378 0122                	CMPI #TOKEN_LE,R0
5C07   020C 0012                	BNE @@2
5C09   0272                     	PSHR R2
5C0A   0273                     	PSHR R3
5C0B   0004 015C 0086           	CALL bas_expr4
5C0E   02B1                     	PULR R1
5C0F   02B0                     	PULR R0
5C10   0274                     	PSHR R4
5C11   0004 0160 0268           	CALL fpcomp
5C14   02B4                     	PULR R4
5C15   0204 0068                	BEQ @@true
5C17   0209 0066                	BNC @@true
5C19   0200 0068                	B @@false

0x5C1B                          @@2:
5C1B   0378 0123                	CMPI #TOKEN_GE,R0
5C1D   020C 0010                	BNE @@3
5C1F   0272                     	PSHR R2
5C20   0273                     	PSHR R3
5C21   0004 015C 0086           	CALL bas_expr4
5C24   02B1                     	PULR R1
5C25   02B0                     	PULR R0
5C26   0274                     	PSHR R4
5C27   0004 0160 0268           	CALL fpcomp
5C2A   02B4                     	PULR R4
5C2B   0201 0052                	BC @@true
5C2D   0200 0054                	B @@false

0x5C2F                          @@3:
5C2F   0378 0124                	CMPI #TOKEN_NE,R0
5C31   020C 0010                	BNE @@4
5C33   0272                     	PSHR R2
5C34   0273                     	PSHR R3
5C35   0004 015C 0086           	CALL bas_expr4
5C38   02B1                     	PULR R1
5C39   02B0                     	PULR R0
5C3A   0274                     	PSHR R4
5C3B   0004 0160 0268           	CALL fpcomp
5C3E   02B4                     	PULR R4
5C3F   020C 003E                	BNE @@true
5C41   0200 0040                	B @@false

0x5C43                          @@4:
5C43   0378 0125                	CMPI #TOKEN_EQ,R0
5C45   020C 0010                	BNE @@5
5C47   0272                     	PSHR R2
5C48   0273                     	PSHR R3
5C49   0004 015C 0086           	CALL bas_expr4
5C4C   02B1                     	PULR R1
5C4D   02B0                     	PULR R0
5C4E   0274                     	PSHR R4
5C4F   0004 0160 0268           	CALL fpcomp
5C52   02B4                     	PULR R4
5C53   0204 002A                	BEQ @@true
5C55   0200 002C                	B @@false

0x5C57                          @@5:
5C57   0378 0126                	CMPI #TOKEN_LT,R0
5C59   020C 0010                	BNE @@6
5C5B   0272                     	PSHR R2
5C5C   0273                     	PSHR R3
5C5D   0004 015C 0086           	CALL bas_expr4
5C60   02B1                     	PULR R1
5C61   02B0                     	PULR R0
5C62   0274                     	PSHR R4
5C63   0004 0160 0268           	CALL fpcomp
5C66   02B4                     	PULR R4
5C67   0209 0016                	BNC @@true
5C69   0200 0018                	B @@false

0x5C6B                          @@6:
5C6B   0272                     	PSHR R2
5C6C   0273                     	PSHR R3
5C6D   0004 015C 0086           	CALL bas_expr4
5C70   02B1                     	PULR R1
5C71   02B0                     	PULR R0
5C72   0274                     	PSHR R4
5C73   0004 0160 0268           	CALL fpcomp
5C76   02B4                     	PULR R4
5C77   0204 000A                	BEQ @@false
5C79   0209 0008                	BNC @@false
5C7B   0200 0002                	B @@true

5C7D   0014                     @@1:	DECR R4
5C7E   02B7                     	PULR PC

5C7F   01D2                     @@true:	CLRR R2
5C80   02BB 00BF                	MVII #$00BF,R3
5C82   02B7                     	PULR PC

5C83   01D2                     @@false:	CLRR R2
5C84   01DB                     	CLRR R3
5C85   02B7                     	PULR PC

                                	ENDP

0x5C86                          bas_expr4:	PROC
5C86   0275                     	PSHR R5
5C87   0004 015C 00B7           	CALL bas_expr5
0x5C8A                          @@0:
5C8A   0004 0150 03B5           	CALL get_next
5C8D   0378 002B                	CMPI #$2b,R0
5C8F   020C 0010                	BNE @@1
5C91   0272                     	PSHR R2
5C92   0273                     	PSHR R3
5C93   0004 015C 00B7           	CALL bas_expr5
5C96   02B1                     	PULR R1
5C97   02B0                     	PULR R0
5C98   0274                     	PSHR R4
5C99   0004 0160 014F           	CALL fpadd
5C9C   0082                     	MOVR R0,R2
5C9D   008B                     	MOVR R1,R3
5C9E   02B4                     	PULR R4
5C9F   0220 0016                	B @@0

0x5CA1                          @@1:
5CA1   0378 002D                	CMPI #$2d,R0
5CA3   020C 0010                	BNE @@2
5CA5   0272                     	PSHR R2
5CA6   0273                     	PSHR R3
5CA7   0004 015C 00B7           	CALL bas_expr5
5CAA   02B1                     	PULR R1
5CAB   02B0                     	PULR R0
5CAC   0274                     	PSHR R4
5CAD   0004 0160 014D           	CALL fpsub
5CB0   0082                     	MOVR R0,R2
5CB1   008B                     	MOVR R1,R3
5CB2   02B4                     	PULR R4
5CB3   0220 002A                	B @@0

5CB5   0014                     @@2:	DECR R4
5CB6   02B7                     	PULR PC
                                	ENDP

0x5CB7                          bas_expr5:	PROC
5CB7   0275                     	PSHR R5
5CB8   0004 015C 00E8           	CALL bas_expr6
0x5CBB                          @@0:
5CBB   0004 0150 03B5           	CALL get_next
5CBE   0378 002A                	CMPI #$2a,R0
5CC0   020C 0010                	BNE @@1
5CC2   0272                     	PSHR R2
5CC3   0273                     	PSHR R3
5CC4   0004 015C 00E8           	CALL bas_expr6
5CC7   02B1                     	PULR R1
5CC8   02B0                     	PULR R0
5CC9   0274                     	PSHR R4
5CCA   0004 0160 01DA           	CALL fpmul
5CCD   0082                     	MOVR R0,R2
5CCE   008B                     	MOVR R1,R3
5CCF   02B4                     	PULR R4
5CD0   0220 0016                	B @@0

0x5CD2                          @@1:
5CD2   0378 002F                	CMPI #$2f,R0
5CD4   020C 0010                	BNE @@2
5CD6   0272                     	PSHR R2
5CD7   0273                     	PSHR R3
5CD8   0004 015C 00E8           	CALL bas_expr6
5CDB   02B1                     	PULR R1
5CDC   02B0                     	PULR R0
5CDD   0274                     	PSHR R4
5CDE   0004 0160 0212           	CALL fpdiv
5CE1   0082                     	MOVR R0,R2
5CE2   008B                     	MOVR R1,R3
5CE3   02B4                     	PULR R4
5CE4   0220 002A                	B @@0

5CE6   0014                     @@2:	DECR R4
5CE7   02B7                     	PULR PC
                                	ENDP

0x5CE8                          bas_expr6:	PROC
5CE8   0275                     	PSHR R5
5CE9   0004 0150 03B5           	CALL get_next
5CEC   0378 002D                	CMPI #$2D,R0	; Minus?
5CEE   020C 000B                	BNE @@1
5CF0   0004 015C 012D           	CALL bas_expr7
5CF3   0090                     	MOVR R2,R0
5CF4   0099                     	MOVR R3,R1
5CF5   0004 0160 0364           	CALL fpneg
5CF8   0082                     	MOVR R0,R2
5CF9   008B                     	MOVR R1,R3
5CFA   02B7                     	PULR PC
                                	
5CFB   0378 011F                @@1:	CMPI #TOKEN_NOT,R0	; NOT?
5CFD   020C 000F                	BNE @@2
5CFF   0004 015C 012D           	CALL bas_expr7
5D02   0090                     	MOVR R2,R0
5D03   0099                     	MOVR R3,R1
5D04   0004 0160 0322           	CALL fp2int
5D07   0018                     	COMR R0
5D08   0004 0160 0285           	CALL fpfromint
5D0B   0082                     	MOVR R0,R2
5D0C   008B                     	MOVR R1,R3
5D0D   02B7                     	PULR PC

5D0E   0014                     @@2:	DECR R4
5D0F   0004 015C 012D           	CALL bas_expr7
5D12   02B7                     	PULR PC
                                	ENDP

0x5D13                          bas_expr_paren:	PROC
5D13   0275                     	PSHR R5
5D14   0004 0150 03B5           	CALL get_next
5D17   0378 0028                	CMPI #$28,R0
5D19   020C 000D                	BNE @@1
5D1B   0004 0158 038A           	CALL bas_expr
5D1E   0004 0150 03B5           	CALL get_next
5D21   0378 0029                	CMPI #$29,R0
5D23   020C 0003                	BNE @@1
5D25   0090                     	MOVR R2,R0
5D26   0099                     	MOVR R3,R1
5D27   02B7                     	PULR PC

5D28   02B8 0001                @@1:	MVII #ERR_SYNTAX,R0
5D2A   0004 0150 03BB           	CALL bas_error
                                	ENDP

0x5D2D                          bas_expr7:	PROC
5D2D   0275                     	PSHR R5
5D2E   0004 0150 03B5           	CALL get_next
                                	
5D31   0378 0128                	CMPI #TOKEN_FUNC,R0
5D33   0209 00F0                	BNC @@6
5D35   0081                     	MOVR R0,R1
5D36   02F9 5C15                	ADDI #@@0-TOKEN_FUNC,R1
5D38   0379 5D45                	CMPI #@@0+8,R1
5D3A   0201 00E9                	BC @@6
5D3C   028F                     	MVI@ R1,R7
0x5D3D                          @@0:
5D3D   5D4D                     	DECLE @@INT
5D3E   5D5F                     	DECLE @@ABS
5D3F   5D56                     	DECLE @@SGN
5D40   5D45                     	DECLE @@RND
5D41   5D68                     	DECLE @@STICK
5D42   5DB5                     	DECLE @@STRIG
5D43   5DE0                     	DECLE @@KEY
5D44   5E11                     	DECLE @@BK

0x5D45                          @@RND:
5D45   0274                     	PSHR R4
5D46   0004 0160 0392           	CALL fprnd
5D49   02B4                     	PULR R4
5D4A   0082                     	MOVR R0,R2
5D4B   008B                     	MOVR R1,R3
5D4C   02B7                     	PULR PC
0x5D4D                          @@INT:
5D4D   0004 015C 0113           	CALL bas_expr_paren
5D50   0004 0160 02B4           	CALL fpint
5D53   0082                     	MOVR R0,R2
5D54   008B                     	MOVR R1,R3
5D55   02B7                     	PULR PC
0x5D56                          @@SGN:
5D56   0004 015C 0113           	CALL bas_expr_paren
5D59   0004 0160 0367           	CALL fpsgn
5D5C   0082                     	MOVR R0,R2
5D5D   008B                     	MOVR R1,R3
5D5E   02B7                     	PULR PC
0x5D5F                          @@ABS:
5D5F   0004 015C 0113           	CALL bas_expr_paren
5D62   0004 0160 0361           	CALL fpabs
5D65   0082                     	MOVR R0,R2
5D66   008B                     	MOVR R1,R3
5D67   02B7                     	PULR PC

0x5D68                          @@STICK:
5D68   0004 015C 0113           	CALL bas_expr_paren
5D6B   0004 0160 0322           	CALL fp2int
5D6E   0378 0002                	CMPI #2,R0
5D70   0201 00E7                	BC @@3
5D72   0081                     	MOVR R0,R1
5D73   03F9 01FF                	XORI #$01FF,R1
5D75   0288                     	MVI@ R1,R0
5D76   03F8 00FF                	XORI #$FF,R0
5D78   0081                     	MOVR R0,R1
5D79   03B9 00E0                	ANDI #$E0,R1
5D7B   0379 0080                	CMPI #$80,R1
5D7D   0204 000B                	BEQ @@7
5D7F   0379 0040                	CMPI #$40,R1
5D81   0204 0007                	BEQ @@7
5D83   0379 0020                	CMPI #$20,R1
5D85   0204 0003                	BEQ @@7
5D87   03B8 001F                	ANDI #$1F,R0
5D89   000F                     	INCR R7
5D8A   01C0                     @@7:	CLRR R0
5D8B   02B9 5D95                	MVII #@@TABLE,R1
5D8D   00C1                     	ADDR R0,R1
5D8E   0288                     	MVI@ R1,R0
5D8F   0004 0160 0285           	CALL fpfromint
5D92   0082                     	MOVR R0,R2
5D93   008B                     	MOVR R1,R3
5D94   02B7                     	PULR PC

0x5D95                          @@TABLE:
5D95   0000 0009 0005 0008      	DECLE 0,9,5,8,1,0,4,0
5D99   0001 0000 0004 0000 
5D9D   000D 000C 0000 0000      	DECLE 13,12,0,0,16,0,0,0
5DA1   0010 0000 0000 0000 
5DA5   0000 000A 0006 0007      	DECLE 0,10,6,7,2,0,3,0
5DA9   0002 0000 0003 0000 
5DAD   000E 000B 0000 0000      	DECLE 14,11,0,0,15,0,0,0
5DB1   000F 0000 0000 0000 

0x5DB5                          @@STRIG:
5DB5   0004 015C 0113           	CALL bas_expr_paren
5DB8   0004 0160 0322           	CALL fp2int
5DBB   0378 0002                	CMPI #2,R0
5DBD   0201 009A                	BC @@3
5DBF   0081                     	MOVR R0,R1
5DC0   03F9 01FF                	XORI #$01FF,R1
5DC2   0289                     	MVI@ R1,R1
5DC3   03F9 00FF                	XORI #$FF,R1
5DC5   01C0                     	CLRR R0
5DC6   03B9 00E0                	ANDI #$e0,R1
5DC8   0204 0010                	BEQ @@4
5DCA   0008                     	INCR R0
5DCB   0379 00A0                	CMPI #$a0,R1
5DCD   0204 000B                	BEQ @@4
5DCF   0008                     	INCR R0
5DD0   0379 0060                	CMPI #$60,R1
5DD2   0204 0006                	BEQ @@4
5DD4   0008                     	INCR R0
5DD5   0379 00C0                	CMPI #$C0,R1
5DD7   0204 0001                	BEQ @@4
5DD9   01C0                     	CLRR R0
0x5DDA                          @@4:
5DDA   0004 0160 0285           	CALL fpfromint
5DDD   0082                     	MOVR R0,R2
5DDE   008B                     	MOVR R1,R3
5DDF   02B7                     	PULR PC
0x5DE0                          @@KEY:
5DE0   0004 015C 0113           	CALL bas_expr_paren
5DE3   0004 0160 0322           	CALL fp2int
5DE6   0378 0002                	CMPI #2,R0
5DE8   0201 006F                	BC @@3
5DEA   0081                     	MOVR R0,R1
5DEB   03F9 01FF                	XORI #$01FF,R1
5DED   0289                     	MVI@ R1,R1
5DEE   03F9 00FF                	XORI #$FF,R1
5DF0   01C0                     	CLRR R0
5DF1   02BD 5E05                	MVII #@@KEYS,R5
0x5DF3                          @@9:
5DF3   0369                     	CMP@ R5,R1
5DF4   0204 0009                	BEQ @@8
5DF6   0008                     	INCR R0
5DF7   0369                     	CMP@ R5,R1
5DF8   0204 0005                	BEQ @@8
5DFA   0008                     	INCR R0
5DFB   0378 000C                	CMPI #12,R0
5DFD   022C 000B                	BNE @@9
0x5DFF                          @@8:
5DFF   0004 0160 0285           	CALL fpfromint
5E02   0082                     	MOVR R0,R2
5E03   008B                     	MOVR R1,R3
5E04   02B7                     	PULR PC

0x5E05                          @@KEYS:
5E05   0048 0081 0041 0021      	DECLE $48,$81,$41,$21,$82,$42,$22,$84,$44,$24,$88,$28
5E09   0082 0042 0022 0084 0044 0024 0088 0028 

                                	; BK(v) Read screen
0x5E11                          @@BK:
5E11   0004 015C 0113           	CALL bas_expr_paren
5E14   0004 0160 0322           	CALL fp2int
5E17   0378 00F0                	CMPI #240,R0
5E19   0201 003E                	BC @@3
5E1B   0081                     	MOVR R0,R1
5E1C   02F9 0200                	ADDI #$0200,R1
5E1E   0288                     	MVI@ R1,R0
5E1F   0004 0160 0285           	CALL fpfromint
5E22   0082                     	MOVR R0,R2
5E23   008B                     	MOVR R1,R3
5E24   02B7                     	PULR PC
0x5E25                          @@6:
5E25   0378 0028                	CMPI #$28,R0	; Parenthesis?
5E27   020C 000B                	BNE @@5
5E29   0004 0158 038A           	CALL bas_expr
5E2C   0004 0150 03B5           	CALL get_next
5E2F   0378 0029                	CMPI #$29,R0
5E31   020C 0021                	BNE @@2
5E33   02B7                     	PULR PC
0x5E34                          @@5:	
5E34   0378 0041                	CMPI #$41,R0	; A-Z?
5E36   0209 000A                	BNC @@1
5E38   0378 005B                	CMPI #$5B,R0
5E3A   0201 0006                	BC @@1
5E3C   0004 0154 02D3           	CALL get_var_addr.0
5E3F   02AA                     	MVI@ R5,R2
5E40   02AB                     	MVI@ R5,R3
5E41   02B7                     	PULR PC

5E42   0378 002E                @@1:	CMPI #$2E,R0
5E44   0204 0008                	BEQ @@11
5E46   0378 0030                	CMPI #$30,R0	; 0-9?
5E48   0209 000A                	BNC @@2
5E4A   0378 003A                	CMPI #$3A,R0
5E4C   0201 0006                	BC @@2
0x5E4E                          @@11:
5E4E   0004 015C 0275           	CALL parse_number
5E51   0082                     	MOVR R0,R2
5E52   008B                     	MOVR R1,R3
5E53   02B7                     	PULR PC

5E54   02B8 0001                @@2:	MVII #ERR_SYNTAX,R0
5E56   0004 0150 03BB           	CALL bas_error

5E59   02B8 000C                @@3:	MVII #ERR_BOUNDS,R0
5E5B   0004 0150 03BB           	CALL bas_error
                                	ENDP

                                	;
                                	; Parse an integer.
                                	;
0x5E5E                          parse_integer:	PROC
5E5E   0275                     	PSHR R5
5E5F   01D2                     	CLRR R2
0x5E60                          @@1:
5E60   0338 0030                	SUBI #$30,R0
5E62   0091                     	MOVR R2,R1
5E63   004E                     	SLL R2,2	; x4
5E64   00CA                     	ADDR R1,R2	; x5
5E65   00D2                     	ADDR R2,R2	; x10
5E66   00C2                     	ADDR R0,R2
5E67   02A0                     @@2:	MVI@ R4,R0
5E68   0378 0030                	CMPI #$30,R0
5E6A   0209 0006                	BNC @@3
5E6C   0378 003A                	CMPI #$3A,R0
5E6E   0201 0002                	BC @@3
5E70   0220 0011                	B @@1
0x5E72                          @@3:
5E72   0014                     	DECR R4
5E73   0090                     	MOVR R2,R0
5E74   02B7                     	PULR PC
                                	ENDP

0x5E75                          parse_number:	PROC
5E75   0275                     	PSHR R5
5E76   01D2                     	CLRR R2
5E77   0378 002D                	CMPI #$2D,R0
5E79   020C 0004                	BNE @@1
5E7B   02BB 0001                	MVII #1,R3
5E7D   0200 0008                	B @@2

5E7F   01DB                     @@1:	CLRR R3
0x5E80                          @@4:
5E80   0338 0030                	SUBI #$30,R0
5E82   0091                     	MOVR R2,R1
5E83   004E                     	SLL R2,2
5E84   00CA                     	ADDR R1,R2
5E85   00D2                     	ADDR R2,R2
5E86   00C2                     	ADDR R0,R2
5E87   02A0                     @@2:	MVI@ R4,R0
5E88   0378 0030                	CMPI #$30,R0
5E8A   0209 0006                	BNC @@3
5E8C   0378 003A                	CMPI #$3A,R0
5E8E   0201 0002                	BC @@3
5E90   0220 0011                	B @@4
0x5E92                          @@3:
5E92   0014                     	DECR R4
5E93   0274                     	PSHR R4
5E94   0273                     	PSHR R3
5E95   0090                     	MOVR R2,R0
5E96   0004 0160 02A0           	CALL fpfromuint
5E99   02B3                     	PULR R3
5E9A   009B                     	TSTR R3
5E9B   0204 0003                	BEQ @@5
5E9D   0004 0160 0364           	CALL fpneg
0x5EA0                          @@5:
5EA0   02B4                     	PULR R4
5EA1   02B7                     	PULR PC
                                	ENDP

                                	;
                                	; Save content under the cursor.
                                	;
0x5EA2                          bas_save_cursor:	PROC
5EA2   0284 033B                	MVI bas_ttypos,R4
5EA4   02A0                     	MVI@ R4,R0
5EA5   0240 033D                	MVO R0,bas_card
5EA7   00AF                     	MOVR R5,PC
                                	ENDP

                                	;
                                	; Show blinking cursor.
                                	;
0x5EA8                          bas_blink_cursor:	PROC
5EA8   0280 0102                @@0:	MVI _int,R0
5EAA   0080                     	TSTR R0
5EAB   0224 0004                	BEQ @@0
5EAD   01C0                     	CLRR R0
5EAE   0240 0102                	MVO R0,_int

5EB0   0281 033D                	MVI bas_card,R1
5EB2   0280 0319                	MVI _frame,R0
5EB4   03B8 0010                	ANDI #16,R0
5EB6   0204 0004                	BEQ @@1
5EB8   0281 033C                	MVI bas_curcolor,R1
5EBA   02F9 02F8                	ADDI #$5F*8,R1
5EBC   0284 033B                @@1:	MVI bas_ttypos,R4
5EBE   0261                     	MVO@ R1,R4
5EBF   00AF                     	MOVR R5,PC
                                	ENDP

                                	;
                                	; Remove cursor.
                                	;
0x5EC0                          bas_restore_cursor:	PROC
5EC0   0281 033D                	MVI bas_card,R1
5EC2   0284 033B                	MVI bas_ttypos,R4
5EC4   0261                     	MVO@ R1,R4
5EC5   00AF                     	MOVR R5,PC
                                	ENDP

                                	;
                                	; Output a character to the screen
                                	;
0x5EC6                          bas_output:	PROC
5EC6   0275                     	PSHR R5
5EC7   0378 0020                	CMPI #$20,R0
5EC9   0201 0018                	BC @@0
5ECB   0378 000D                	CMPI #BAS_CR,R0
5ECD   0204 002B                	BEQ @@5
5ECF   0378 000A                	CMPI #BAS_LF,R0
5ED1   0204 0036                	BEQ @@3
5ED3   0378 001C                	CMPI #KEY.LEFT,R0
5ED5   0204 0044                	BEQ @@7
5ED7   0378 001D                	CMPI #KEY.RIGHT,R0
5ED9   0204 004A                	BEQ @@10
5EDB   0378 001E                	CMPI #KEY.UP,R0
5EDD   0204 0050                	BEQ @@12
5EDF   0378 001F                	CMPI #KEY.DOWN,R0
5EE1   0204 0057                	BEQ @@15
0x5EE3                          @@0:
                                	;
                                	; Normal letter
                                	;
5EE3   0338 0020                	SUBI #$20,R0
5EE5   03B8 00FF                	ANDI #$FF,R0	
5EE7   004C                     	SLL R0,2	; Convert character to card number.
5EE8   0048                     	SLL R0,1
5EE9   02C0 033C                	ADD bas_curcolor,R0
5EEB   0284 033B                	MVI bas_ttypos,R4
5EED   0260                     	MVO@ R0,R4	; Put on the screen.
5EEE   037C 02F0                	CMPI #$02F0,R4	; Reached the screen limit?
5EF0   020C 0005                	BNE @@1		; No, jump.
5EF2   0004 015C 0345           	CALL @@scroll
5EF5   02BC 02DC                	MVII #$02DC,R4
5EF7   0244 033B                @@1:	MVO R4,bas_ttypos
5EF9   02B7                     	PULR PC

                                	;
                                	; Carriage return.
                                	;
5EFA   0284 033B                @@5:	MVI bas_ttypos,R4
5EFC   033C 0200                	SUBI #$0200,R4
5EFE   02B8 01EC                	MVII #$01EC,R0
5F00   02F8 0014                @@6:	ADDI #20,R0
5F02   033C 0014                	SUBI #20,R4
5F04   0221 0005                	BC @@6
5F06   0240 033B                	MVO R0,bas_ttypos
5F08   02B7                     	PULR PC
                                	
                                	;
                                	; Line feed.
                                	;
5F09   0284 033B                @@3:	MVI bas_ttypos,R4
5F0B   02FC 0014                	ADDI #20,R4
5F0D   037C 02F0                	CMPI #$02F0,R4
5F0F   0209 0007                	BNC @@4
5F11   0274                     	PSHR R4
5F12   0004 015C 0345           	CALL @@scroll
5F15   02B4                     	PULR R4
5F16   033C 0014                	SUBI #20,R4
5F18   0244 033B                @@4:	MVO R4,bas_ttypos
5F1A   02B7                     	PULR PC

                                	;
                                	; Move left.
                                	;
5F1B   0284 033B                @@7:	MVI bas_ttypos,R4
5F1D   037C 0200                	CMPI #$0200,R4
5F1F   0204 0001                	BEQ @@8
5F21   0014                     	DECR R4
5F22   0244 033B                @@8:	MVO R4,bas_ttypos
5F24   02B7                     	PULR PC

                                	;
                                	; Move right.
                                	;
5F25   0284 033B                @@10:	MVI bas_ttypos,R4
5F27   037C 02EF                	CMPI #$02EF,R4
5F29   0204 0001                	BEQ @@11
5F2B   000C                     	INCR R4
5F2C   0244 033B                @@11:	MVO R4,bas_ttypos
5F2E   02B7                     	PULR PC

                                	;
                                	; Move upward.
                                	;
5F2F   0284 033B                @@12:	MVI bas_ttypos,R4
5F31   037C 0214                	CMPI #$0214,R4
5F33   0209 0002                	BNC @@14
5F35   033C 0014                	SUBI #20,R4
5F37   0244 033B                @@14:	MVO R4,bas_ttypos
5F39   02B7                     	PULR PC

                                	;
                                	; Move downward.
                                	;
5F3A   0284 033B                @@15:	MVI bas_ttypos,R4
5F3C   037C 02DC                	CMPI #$02DC,R4
5F3E   0201 0002                	BC @@16
5F40   02FC 0014                	ADDI #20,R4
5F42   0244 033B                @@16:	MVO R4,bas_ttypos
5F44   02B7                     	PULR PC

                                	;
                                	; Scroll up.
                                	;
0x5F45                          @@scroll:
5F45   0275                     	PSHR R5
5F46   02BC 0214                	MVII #$0214,R4
5F48   02BD 0200                	MVII #$0200,R5
5F4A   02BA 0037                	MVII #$00DC/4,R2
5F4C   02A0                     @@2:	MVI@ R4,R0
5F4D   0268                     	MVO@ R0,R5
5F4E   02A0                     	MVI@ R4,R0
5F4F   0268                     	MVO@ R0,R5
5F50   02A0                     	MVI@ R4,R0
5F51   0268                     	MVO@ R0,R5
5F52   02A0                     	MVI@ R4,R0
5F53   0268                     	MVO@ R0,R5
5F54   0012                     	DECR R2
5F55   022C 000A                	BNE @@2
                                	; Clear the bottom row.
5F57   0280 033C                	MVI bas_curcolor,R0
5F59   02BA 000A                	MVII #$0014/2,R2
5F5B   0268                     @@9:	MVO@ R0,R5
5F5C   0268                     	MVO@ R0,R5
5F5D   0012                     	DECR R2
5F5E   022C 0004                	BNE @@9
5F60   0280 033A                	MVI bas_firstpos,R0
5F62   0378 0214                	CMPI #$0214,R0
5F64   0209 0004                	BNC @@17
5F66   0338 0014                	SUBI #20,R0
5F68   0240 033A                	MVO R0,bas_firstpos
0x5F6A                          @@17:
5F6A   02B7                     	PULR PC

                                	ENDP

                                	;
                                	; ECS keyboard scanning routines by Joe Zbiciak (intvnut)
                                	;
0x5F6B                          KBD_DECODE  PROC
5F6B   00FF 006C 006A 0067      @@no_mods   DECLE   KEY.NONE, "ljgda"                       ; col 7
5F6F   0064 0061 
5F71   000A 006F 0075 0074                 DECLE   KEY.ENTER, "oute", KEY.NONE             ; col 6
5F75   0065 00FF 
5F77   0030 0038 0036 0034                 DECLE   "08642", KEY.RIGHT                      ; col 5
5F7B   0032 001D 
5F7D   001B 0039 0037 0035                 DECLE   KEY.ESC, "97531"                        ; col 4
5F81   0033 0031 
5F83   0070 0069 0079 0072                 DECLE   "piyrwq"                                ; col 3
5F87   0077 0071 
5F89   003B 006B 0068 0066                 DECLE   ";khfs", KEY.UP                         ; col 2
5F8D   0073 001E 
5F8F   002E 006D 0062 0063                 DECLE   ".mbcz", KEY.DOWN                       ; col 1
5F93   007A 001F 
5F95   001C 002C 006E 0076                 DECLE   KEY.LEFT, ",nvx "                       ; col 0
5F99   0078 0020 

5F9B   00FF 004C 004A 0047      @@shifted   DECLE   KEY.NONE, "LJGDA"                       ; col 7
5F9F   0044 0041 
5FA1   000A 004F 0055 0054                 DECLE   KEY.ENTER, "OUTE", KEY.NONE             ; col 6
5FA5   0045 00FF 
5FA7   0029 002A 002D 0024                 DECLE   ")*-$\"\'"                               ; col 5
5FAB   0022 0027 
5FAD   001B 0028 002F 002B                 DECLE   KEY.ESC, "(/+#="                        ; col 4
5FB1   0023 003D 
5FB3   0050 0049 0059 0052                 DECLE   "PIYRWQ"                                ; col 3
5FB7   0057 0051 
5FB9   003A 004B 0048 0046                 DECLE   ":KHFS^"                                ; col 2
5FBD   0053 005E 
5FBF   003E 004D 0042 0043                 DECLE   ">MBCZ?"                                ; col 1
5FC3   005A 003F 
5FC5   0025 003C 004E 0056                 DECLE   "%<NVX "                                ; col 0
5FC9   0058 0020 

5FCB   00FF 000C 000A 0007      @@control   DECLE   KEY.NONE, $C, $A, $7, $4, $1            ; col 7
5FCF   0004 0001 
5FD1   000A 000F 0015 0014                 DECLE   KEY.ENTER, $F, $15, $14, $5, KEY.NONE   ; col 6
5FD5   0005 00FF 
5FD7   007D 007E 005F 0021                 DECLE   "}~_!'", KEY.RIGHT                      ; col 5
5FDB   0027 001D 
5FDD   001B 007B 0026 0040                 DECLE   KEY.ESC, "{&@`~"                        ; col 4
5FE1   0060 007E 
5FE3   0010 0009 0019 0012                 DECLE   $10, $9, $19, $12, $17, $11             ; col 3
5FE7   0017 0011 
5FE9   007C 000B 0008 0006                 DECLE   "|", $B, $8, $6, $13, KEY.UP            ; col 2
5FED   0013 001E 
5FEF   005D 000D 0002 0003                 DECLE   "]", $D, $2, $3, $1A, KEY.DOWN          ; col 1
5FF3   001A 001F 
5FF5   001C 005B 000E 0016                 DECLE   KEY.LEFT, "[", $0E, $16, $18, $20       ; col 0
5FF9   0018 0020 
                                           ENDP

0x5FFB                          SCAN_KBD    PROC

                                           ;; ------------------------------------------------------------ ;;
                                           ;;  Try to find CTRL and SHIFT first.                           ;;
                                           ;;  Shift takes priority over control.                          ;;
                                           ;; ------------------------------------------------------------ ;;
5FFB   02BB 5F6B                           MVII    #KBD_DECODE.no_mods, R3 ; neither shift nor ctrl

                                           ; maybe DIS here
5FFD   0280 00F8                           MVI     $F8,        R0
5FFF   03B8 003F                           ANDI    #$3F,       R0
6001   03F8 0080                           XORI    #$80,       R0          ; transpose scan mode
6003   0240 00F8                           MVO     R0,         $F8
                                           ; maybe EIS here

6005   02B9 007F                           MVII    #$7F,       R1          ; \_ drive column 7 to 0
6007   0241 00FF                           MVO     R1,         $FF         ; /
6009   0282 00FE                           MVI     $FE,        R2          ; \
600B   03BA 0040                           ANDI    #$40,       R2          ;  > look for a 0 in row 6
600D   0204 000E                           BEQ     @@have_shift            ; /

600F   02B9 00BF                           MVII    #$BF,       R1          ; \_ drive column 6 to 0
6011   0241 00FF                           MVO     R1,         $FF         ; /
6013   0282 00FE                           MVI     $FE,        R2          ; \
6015   03BA 0020                           ANDI    #$20,       R2          ;  > look for a 0 in row 5
6017   020C 0006                           BNEQ    @@done_shift_ctrl       ; /

6019   02BB 5FCB                           MVII    #KBD_DECODE.control, R3
601B   0200 0002                           B       @@done_shift_ctrl

0x601D                          @@have_shift:
601D   02BB 5F9B                           MVII    #KBD_DECODE.shifted, R3

0x601F                          @@done_shift_ctrl:

                                           ;; ------------------------------------------------------------ ;;
                                           ;;  Start at col 7 and work our way to col 0.                   ;;
                                           ;; ------------------------------------------------------------ ;;
601F   01D2                                CLRR    R2              ; col pointer
6020   02B9 FF7F                           MVII    #$FF7F, R1

6022   0241 00FF                @@col:      MVO     R1,     $FF
6024   0280 00FE                           MVI     $FE,    R0
6026   03F8 00FF                           XORI    #$FF,   R0
6028   020C 000B                           BNEQ    @@maybe_key

602A   02FA 0006                @@cont_col: ADDI    #6,     R2
602C   0061                                SLR     R1
602D   0379 00FF                           CMPI    #$FF,   R1
602F   022C 000E                           BNEQ    @@col

6031   02B8 00FF                           MVII    #KEY.NONE,  R0
6033   0200 001D                           B       @@none

                                           ;; ------------------------------------------------------------ ;;
                                           ;;  Looks like a key is pressed.  Let's decode it.              ;;
                                           ;; ------------------------------------------------------------ ;;
0x6035                          @@maybe_key:
6035   0094                                MOVR    R2,     R4
6036   007C                                SARC    R0,     2
6037   0201 0011                           BC      @@got_key       ; row 0
6039   0202 000E                           BOV     @@got_key1      ; row 1
603B   02FC 0002                           ADDI    #2,     R4 
603D   007C                                SARC    R0,     2
603E   0201 000A                           BC      @@got_key       ; row 2
6040   0202 0007                           BOV     @@got_key1      ; row 3
6042   02FC 0002                           ADDI    #2,     R4 
6044   007C                                SARC    R0,     2
6045   0201 0003                           BC      @@got_key       ; row 4
6047   022A 001E                           BNOV    @@cont_col      ; row 5
6049   000C                     @@got_key1: INCR    R4
0x604A                          @@got_key:
604A   00DC                                ADDR    R3,     R4      ; add modifier offset
604B   02A0                                MVI@    R4,     R0

604C   0378 00FF                           CMPI    #KEY.NONE, R0   ; if invalid, keep scanning
604E   0224 0025                           BEQ     @@cont_col

6050   0340 010A                           CMP     ECS_KEY_LAST, R0
6052   0240 010A                @@none:     MVO     R0,         ECS_KEY_LAST
6054   020C 0002                           BNEQ    @@new
6056   02B8 00FF                           MVII    #KEY.NONE,  R0

0x6058                          @@new:      ; maybe DIS here
6058   0281 00F8                           MVI     $F8,        R1  ; \
605A   03B9 003F                           ANDI    #$3F,       R1  ;  > set both I/O ports to "input"
605C   0241 00F8                           MVO     R1,         $F8 ; /
                                           ; maybe EIS here
605E   00AF                                JR      R5
                                           ENDP

0x605F                          PRNUM16:	PROC
605F   0275                     @@l:	PSHR R5
6060   01D2                     	CLRR R2
6061   02B9 2710                	MVII #10000,R1
6063   0004 0160 007C           	CALL @@d
6066   02B9 03E8                	MVII #1000,R1
6068   0004 0160 007C           	CALL @@d
606B   02B9 0064                	MVII #100,R1
606D   0004 0160 007C           	CALL @@d
6070   02B9 000A                	MVII #10,R1
6072   0004 0160 007C           	CALL @@d
6075   02B9 0001                	MVII #1,R1
6077   008A                     	MOVR R1,R2
6078   0004 0160 007C           	CALL @@d
607B   02B7                     	PULR PC

607C   0275                     @@d:	PSHR R5
607D   02BB 002F                	MVII #$2F,R3
607F   000B                     @@1:	INCR R3
6080   0108                     	SUBR R1,R0
6081   0221 0003                	BC @@1
6083   00C8                     	ADDR R1,R0
6084   0270                     	PSHR R0
6085   037B 0030                	CMPI #$30,R3
6087   020C 0003                	BNE @@2
6089   0092                     	TSTR R2
608A   0204 0007                	BEQ @@3
608C   000A                     @@2:	INCR R2
608D   0272                     	PSHR R2
608E   0098                     	MOVR R3,R0
608F   0004 015C 02C6           	CALL bas_output
6092   02B2                     	PULR R2
6093   02B0                     @@3:	PULR R0
6094   02B7                     	PULR PC

                                	ENDP

0x6095                          _set_isr:	PROC
6095   02A8                     	MVI@ R5,R0
6096   0240 0100                	MVO R0,ISRVEC
6098   0040                     	SWAP R0
6099   0240 0101                	MVO R0,ISRVEC+1
609B   00AF                     	JR R5
                                	ENDP

                                	;
                                	; Interruption routine
                                	;
0x609C                          _int_vector:     PROC

609C   02B9 0001                	MVII #1,R1
609E   0241 0102                	MVO R1,_int	; Indicates interrupt happened.
                                	
60A0   0240 0020                	MVO R0,$20	; Enables display
60A2   0280 0104                	MVI _mode,R0
60A4   0080                     	TSTR R0
60A5   0204 0004                	BEQ @@1
60A7   0240 0021                	MVO R0,$21	; Foreground/background mode
60A9   0200 0012                	B @@2

60AB   0280 0021                @@1:	MVI $21,R0	; Color stack mode
60AD   0280 0347                	MVI _mode_color,R0
60AF   0240 0028                	MVO R0,$28
60B1   0064                     	SLR R0,2
60B2   0064                     	SLR R0,2
60B3   0240 0029                	MVO R0,$29
60B5   0064                     	SLR R0,2
60B6   0064                     	SLR R0,2
60B7   0240 002A                	MVO R0,$2A
60B9   0064                     	SLR R0,2
60BA   0064                     	SLR R0,2
60BB   0240 002B                	MVO R0,$2B
0x60BD                          @@2:

0x60BD                          @@0:
60BD   0275                     	BEGIN

60BE   0280 0105                	MVI _border_color,R0
60C0   0240 002C                	MVO     R0,     $2C     ; Border color
60C2   0280 0106                	MVI _border_mask,R0
60C4   0240 0032                	MVO     R0,     $32     ; Border mask
                                	;
                                	; Save collision registers for further use and clear them
                                	;
60C6   02BC 0018                	MVII #$18,R4
60C8   02BD 031A                	MVII #_col0,R5
60CA   02A0                     	MVI@ R4,R0
60CB   0268                     	MVO@ R0,R5  ; _col0
60CC   02A0                     	MVI@ R4,R0
60CD   0268                     	MVO@ R0,R5  ; _col1
60CE   02A0                     	MVI@ R4,R0
60CF   0268                     	MVO@ R0,R5  ; _col2
60D0   02A0                     	MVI@ R4,R0
60D1   0268                     	MVO@ R0,R5  ; _col3
60D2   02A0                     	MVI@ R4,R0
60D3   0268                     	MVO@ R0,R5  ; _col4
60D4   02A0                     	MVI@ R4,R0
60D5   0268                     	MVO@ R0,R5  ; _col5
60D6   02A0                     	MVI@ R4,R0
60D7   0268                     	MVO@ R0,R5  ; _col6
60D8   02A0                     	MVI@ R4,R0
60D9   0268                     	MVO@ R0,R5  ; _col7
                                	
                                	;
                                	; Updates sprites (MOBs)
                                	;
60DA   00AC                     	MOVR R5,R4	; MVII #_mobs,R4
60DB   01ED                     	CLRR R5		; X-coordinates
                                    REPEAT 8
60DC   02A0                     	MVI@ R4,R0
60DD   0268                     	MVO@ R0,R5
60DE   02A0                     	MVI@ R4,R0
60DF   0268                     	MVO@ R0,R5
60E0   02A0                     	MVI@ R4,R0
60E1   0268                     	MVO@ R0,R5
  ;== 1                             ENDR
60E2   02A0                     	MVI@ R4,R0
60E3   0268                     	MVO@ R0,R5
60E4   02A0                     	MVI@ R4,R0
60E5   0268                     	MVO@ R0,R5
60E6   02A0                     	MVI@ R4,R0
60E7   0268                     	MVO@ R0,R5
  ;== 2                             ENDR
60E8   02A0                     	MVI@ R4,R0
60E9   0268                     	MVO@ R0,R5
60EA   02A0                     	MVI@ R4,R0
60EB   0268                     	MVO@ R0,R5
60EC   02A0                     	MVI@ R4,R0
60ED   0268                     	MVO@ R0,R5
  ;== 3                             ENDR
60EE   02A0                     	MVI@ R4,R0
60EF   0268                     	MVO@ R0,R5
60F0   02A0                     	MVI@ R4,R0
60F1   0268                     	MVO@ R0,R5
60F2   02A0                     	MVI@ R4,R0
60F3   0268                     	MVO@ R0,R5
  ;== 4                             ENDR
60F4   02A0                     	MVI@ R4,R0
60F5   0268                     	MVO@ R0,R5
60F6   02A0                     	MVI@ R4,R0
60F7   0268                     	MVO@ R0,R5
60F8   02A0                     	MVI@ R4,R0
60F9   0268                     	MVO@ R0,R5
  ;== 5                             ENDR
60FA   02A0                     	MVI@ R4,R0
60FB   0268                     	MVO@ R0,R5
60FC   02A0                     	MVI@ R4,R0
60FD   0268                     	MVO@ R0,R5
60FE   02A0                     	MVI@ R4,R0
60FF   0268                     	MVO@ R0,R5
  ;== 6                             ENDR
6100   02A0                     	MVI@ R4,R0
6101   0268                     	MVO@ R0,R5
6102   02A0                     	MVI@ R4,R0
6103   0268                     	MVO@ R0,R5
6104   02A0                     	MVI@ R4,R0
6105   0268                     	MVO@ R0,R5
  ;== 7                             ENDR
6106   02A0                     	MVI@ R4,R0
6107   0268                     	MVO@ R0,R5
6108   02A0                     	MVI@ R4,R0
6109   0268                     	MVO@ R0,R5
610A   02A0                     	MVI@ R4,R0
610B   0268                     	MVO@ R0,R5
  ;== 8                             ENDR
610C   01C0                     	CLRR R0		; Erase collision bits (R5 = $18)
610D   0268                     	MVO@ R0,R5
610E   0268                     	MVO@ R0,R5
610F   0268                     	MVO@ R0,R5
6110   0268                     	MVO@ R0,R5
6111   0268                     	MVO@ R0,R5
6112   0268                     	MVO@ R0,R5
6113   0268                     	MVO@ R0,R5
6114   0268                     	MVO@ R0,R5

                                	;
                                	; Detect GRAM definition
                                	;
6115   0284 0348                	MVI _gram_bitmap,R4
6117   00A4                     	TSTR R4
6118   0204 001E                	BEQ @@vi1
611A   0281 0107                	MVI _gram_target,R1
611C   004D                     	SLL R1,2
611D   0049                     	SLL R1,1
611E   02F9 3800                	ADDI #$3800,R1
6120   008D                     	MOVR R1,R5
6121   0280 0108                	MVI _gram_total,R0
0x6123                          @@vi3:
6123   02A1                     	MVI@    R4,     R1
6124   0269                     	MVO@    R1,     R5
6125   0041                     	SWAP    R1
6126   0269                     	MVO@    R1,     R5
6127   02A1                     	MVI@    R4,     R1
6128   0269                     	MVO@    R1,     R5
6129   0041                     	SWAP    R1
612A   0269                     	MVO@    R1,     R5
612B   02A1                     	MVI@    R4,     R1
612C   0269                     	MVO@    R1,     R5
612D   0041                     	SWAP    R1
612E   0269                     	MVO@    R1,     R5
612F   02A1                     	MVI@    R4,     R1
6130   0269                     	MVO@    R1,     R5
6131   0041                     	SWAP    R1
6132   0269                     	MVO@    R1,     R5
6133   0010                     	DECR R0
6134   022C 0012                	BNE @@vi3
6136   0240 0348                	MVO R0,_gram_bitmap
0x6138                          @@vi1:

                                	; Increase frame number
6138   0280 0319                	MVI _frame,R0
613A   0008                     	INCR R0
613B   0240 0319                	MVO R0,_frame

                                	; Keyboard debounce
613D   0280 0109                	MVI _debounce,R0
613F   0080                     	TSTR R0
6140   0204 0003                	BEQ @@3
6142   0010                     	DECR R0
6143   0240 0109                	MVO R0,_debounce
0x6145                          @@3:	
                                	; Adjust random number generator
6145   0280 0346                	MVI lfsr,R0
6147   0008                     	INCR R0
6148   0008                     	INCR R0
6149   0008                     	INCR R0
614A   0240 0346                	MVO R0,lfsr

614C   02B7                     	RETURN
                                	ENDP

                                	INCLUDE "fplib.asm"
                                	;
                                	; Floating-point arithmetic routines for CP1610 processor
                                	;
                                	; by Oscar Toledo G.
                                	; https://nanochess.org/
                                	;
                                	; Creation date: Sep/17/2025.
                                	; Revision date: Sep/18/2025. fpsub/fpadd preliminary.
                                	; Revision date: Sep/19/2025. fpsub/fpadd operative. Added fpmul, fpdiv, fpfromint,
                                	;                             fpfromuint, fpint, fp2int, and fp2uint.
                                	; Revision date: Sep/20/2025. Added fpsgn, fpmulby2, fpdivby2, fpneg, fpfloor, and
                                	;                             fpceil. Corrrected bug in fpmul.
                                	; Revision date: Sep/22/2025. fpmul speed-up. Corrected bug in rounding (so now
                                	;                             1.0 / 3.0 * 3.0 = 1.0)
                                	; Revision date: Sep/24/2025. Added fprnd.
                                	;

                                	; Temporary
0x317                           fptemp1:	EQU $0317
0x318                           fptemp2:	EQU $0318

0x3F                            FPEXP_BIAS:	EQU $3F	; The base exponent for value 1.0

                                	;
                                	; Floating-point representation:
                                	;
                                	;        R0                R1
                                	; High-word                  Low-word
                                	; 54321098 76543210 54321098 76543210
                                	; |--------mantissa----------|Exponent
                                	;                           Sign (0= Positive, 1= Negative)
                                	; Exponent zero is the number zero.
                                	;
                                	; $0000 $003E = 0.5

                                	; $0000 $003F = 1.0
                                	; $0000 $00BF = -1.0

                                	;
                                	; Floating-point subtraction
                                	;
0x614D                          fpsub:	PROC
614D   03FB 0080                	XORI #$0080,R3	; Make negative the second operand
                                	ENDP

                                	;
                                	; Floating-point addition
                                	;
                                	; R0,R1 = First operand
                                	; R2,R3 = Second operand
                                	; Result in R0,R1
0x614F                          fpadd:	PROC
614F   0275                     	PSHR R5
6150   008C                     	MOVR R1,R4	
6151   03BC 007F                	ANDI #$007F,R4	; Is first operand zero?
6153   020C 0004                	BNE @@1		; Jump if not.
6155   0090                     	MOVR R2,R0	; Return R2+R3 as result.
6156   0099                     	MOVR R3,R1
6157   0200 0080                	B @@2
                                	
6159   009D                     @@1:	MOVR R3,R5
615A   03BD 007F                	ANDI #$007F,R5	; Is second operand zero?
615C   0204 007B                	BEQ @@2		; Jump if yes (returns first operand unchanged)

615E   0125                     	SUBR R4,R5	; Exponents comparison.
615F   0206 0007                	BLE @@4		; Jump if the second operand has an equal or lesser exponent.
6161   0084                     	MOVR R0,R4	; Interchange operands.
6162   0090                     	MOVR R2,R0
6163   00A2                     	MOVR R4,R2
6164   008C                     	MOVR R1,R4
6165   0099                     	MOVR R3,R1
6166   00A3                     	MOVR R4,R3
6167   0025                     	NEGR R5		; Negate bit difference.
0x6168                          @@4:
6168   037D FFE8                	CMPI #$FFE8,R5	; Too small (25 bits off)? (second operand wouldn't cause effect)
616A   0205 006D                	BLT @@2		; Return with first operand unchanged.

616C   0271                     	PSHR R1		; Save first operand's sign and exponent.
616D   008C                     	MOVR R1,R4
616E   01DC                     	XORR R3,R4	; XOR both signs.

616F   03B9 FF00                	ANDI #$FF00,R1	; Remove exponents.
6171   03BB FF00                	ANDI #$FF00,R3

6173   0007                     	SETC		; Restore bit one in mantissa.
6174   0070                     	RRC R0,1
6175   0071                     	RRC R1,1
6176   0007                     	SETC		; Restore bit one in mantissa.
6177   0072                     	RRC R2,1
6178   0073                     	RRC R3,1
6179   00AD                     	TSTR R5		; Displace second operand to the right.
617A   0204 0006                	BEQ @@3
0x617C                          @@5:
617C   0006                     	CLRC
617D   0072                     	RRC R2,1
617E   0073                     	RRC R3,1
617F   000D                     	INCR R5
6180   022C 0005                	BNE @@5
                                	; At this point both numbers have the same exponent
0x6182                          @@3:	
6182   0006                     	CLRC
6183   0070                     	RRC R0,1	; Insert a leading zero (to detect carry)
6184   0071                     	RRC R1,1	; Mantissa is now 26 bits.

6185   0006                     	CLRC
6186   0072                     	RRC R2,1	; Insert a leading zero (to detect carry)
6187   0073                     	RRC R3,1	; Mantissa is now 26 bits.

6188   02B5                     	PULR R5
6189   0275                     	PSHR R5
618A   03BD 007F                	ANDI #$007F,R5
618C   000D                     	INCR R5		; Exponent for the number.
618D   000D                     	INCR R5

618E   03BC 0080                	ANDI #$80,R4	; Is required an addition or subtraction?
6190   0204 0011                	BEQ @@6		; Jump for addition.
6192   0119                     	SUBR R3,R1
6193   0010                     	DECR R0
6194   0028                     	ADCR R0
6195   0110                     	SUBR R2,R0
6196   0203 000E                	BPL @@8		; Carry?
6198   0018                     	COMR R0
6199   0019                     	COMR R1
619A   02F9 0001                	ADDI #$0001,R1
619C   0028                     	ADCR R0
619D   02B3                     	PULR R3
619E   03FB 0080                	XORI #$0080,R3	; Reverse sign
61A0   0273                     	PSHR R3
61A1   0200 0003                	B @@8

0x61A3                          @@6:
61A3   00D9                     	ADDR R3,R1	; Addition
61A4   0028                     	ADCR R0
61A5   00D0                     	ADDR R2,R0
                                	;
                                	; Normalize mantissa
                                	;
61A6   0080                     @@8:	TSTR R0
61A7   020C 0003                	BNE @@11
61A9   0089                     	TSTR R1		; Is the result zero?
61AA   0204 0019                	BEQ @@12	; Yes, this is an special case.
0x61AC                          @@11:
61AC   0015                     	DECR R5
61AD   00C9                     	ADDR R1,R1
61AE   0050                     	RLC R0,1
61AF   0229 0004                	BNC @@11	; This loop manages to eliminate the top bit.
                                	; Rounding, so 1.0 / 3.0 * 3.0 becomes 1.0
                                	; >>> START
61B1   008A                     	MOVR R1,R2
61B2   03BA 0080                	ANDI #$0080,R2
61B4   0204 0009                	BEQ @@14
61B6   02F9 0100                	ADDI #$0100,R1
61B8   0028                     	ADCR R0
61B9   0209 0004                	BNC @@14
61BB   0006                     	CLRC		; A zero is inserted.
61BC   0070                     	RRC R0,1
61BD   0071                     	RRC R1,1
61BE   000D                     	INCR R5
0x61BF                          @@14:
                                	; <<< END
61BF   03B9 FF00                	ANDI #$ff00,R1
0x61C1                          @@9:
61C1   037D 0001                	CMPI #$01,R5
61C3   020D 0005                	BGE @@10
0x61C5                          @@12:
61C5   01ED                     	CLRR R5
61C6   01C0                     	CLRR R0		; Minimum number.
61C7   01C9                     	CLRR R1
61C8   0200 000A                	B @@7
0x61CA                          @@10:
61CA   037D 0080                	CMPI #$80,R5
61CC   0205 0006                	BLT @@7
61CE   02BD 007F                	MVII #$7F,R5
61D0   02B8 FFFF                	MVII #$FFFF,R0	; Maximum number.
61D2   02B9 FF00                	MVII #$FF00,R1
0x61D4                          @@7:
61D4   02B3                     	PULR R3
61D5   03BB 0080                	ANDI #$0080,R3
61D7   00D9                     	ADDR R3,R1	; Add sign back.
61D8   00E9                     	ADDR R5,R1	; Add exponent back.
61D9   02B7                     @@2:	PULR PC
                                	ENDP

                                	;
                                	; Floating-point multiplication
                                	;
                                	; r0,r1 = first operand.
                                	; r2,r3 = second operand.
                                	;
0x61DA                          fpmul:	PROC
61DA   0275                     	PSHR R5

61DB   008C                     	MOVR R1,R4	
61DC   03BC 007F                	ANDI #$007F,R4	; Is first operand zero?
61DE   0204 0005                	BEQ @@1
61E0   009D                     	MOVR R3,R5
61E1   03BD 007F                	ANDI #$007F,R5	; Is second operand zero?
61E3   020C 0003                	BNE @@3		; Jump over if not.
61E5   01C0                     @@1:	CLRR R0
61E6   01C9                     	CLRR R1
61E7   02B7                     	PULR PC

                                	; Exponents in R4 and R5
61E8   00EC                     @@3:	ADDR R5,R4
61E9   033C 003D                	SUBI #FPEXP_BIAS-2,R4	; Subtract exponent bias.

61EB   008D                     	MOVR R1,R5
61EC   01DD                     	XORR R3,R5
61ED   0275                     	PSHR R5		; Saved XOR'ed sign bit.
61EE   0274                     	PSHR R4		; Save exponent.

61EF   03B9 FF00                	ANDI #$FF00,R1	; Remove exponent.
61F1   03BB FF00                	ANDI #$FF00,R3	; Remove exponent.

61F3   0007                     	SETC		; Restore bit one in mantissa
61F4   0070                     	RRC R0,1
61F5   0071                     	RRC R1,1
61F6   0007                     	SETC		; Restore bit one in mantissa
61F7   0072                     	RRC R2,1
61F8   0073                     	RRC R3,1	; For the extra bit...
61F9   0072                     	RRC R2,1	; ...because a multiplication can generate
61FA   0073                     	RRC R3,1	; ...(x + y) - 1 bits or (x + y) bits.

                                	;
                                	; Multiply both mantissas
                                	;
                                	; Hacker trick here:
                                	; o As the mantissas are already aligned to the highest-bit,
                                	;   I can stop the multiplication when the first one becomes zero.
                                	;   So the full time for multiplication will happen only with
                                	;   a full-fledged fraction.
                                	; o This incomplete mantissa result generates exactly the same
                                	;   result than a full mantissa multiplication and it is faster.
                                	;
61FB   0084                     	MOVR R0,R4
61FC   008D                     	MOVR R1,R5
61FD   01C0                     	CLRR R0		; Result
61FE   01C9                     	CLRR R1

61FF   00E4                     @@4:	ADDR R4,R4
6200   0209 0003                	BNC @@5
6202   00D9                     	ADDR R3,R1
6203   0028                     	ADCR R0
6204   00D0                     	ADDR R2,R0
6205   0006                     @@5:	CLRC
6206   0072                     	RRC R2,1
6207   0073                     	RRC R3,1
6208   00ED                     	ADDR R5,R5
6209   002C                     	ADCR R4
620A   022C 000C                	BNE @@4
620C   00AD                     	TSTR R5
620D   022C 000F                	BNE @@4

620F   02B5                     	PULR R5		; Restore exponent
                                	; Reuse the normalize code.
6210   0220 0065                	B fpadd.11	; Normalize

                                	ENDP

                                	;
                                	; Floating-point division
                                	;
                                	; r0,r1 = Dividend
                                	; r2,r3 = Divisor
                                	;
0x6212                          fpdiv:	PROC
6212   0275                     	PSHR R5

6213   008C                     	MOVR R1,R4	
6214   03BC 007F                	ANDI #$007F,R4	; Is first operand zero?
6216   0224 003E                	BEQ fpadd.2	; Return same zero.
6218   009D                     	MOVR R3,R5
6219   03BD 007F                	ANDI #$007F,R5	; Is second operand zero?
621B   0224 0043                	BEQ fpadd.2	; Leave first operand untouched.
                                			; !!! Alternative: throw a division-by-zero error.

                                	; Exponents in R4 and R5
621D   012C                     	SUBR R5,R4
621E   02FC 0040                	ADDI #FPEXP_BIAS+1,R4	; Add exponent bias.

6220   008D                     	MOVR R1,R5
6221   01DD                     	XORR R3,R5
6222   0275                     	PSHR R5		; Saved XOR'ed sign bit.
6223   0274                     	PSHR R4		; Save resulting exponent.	

6224   03B9 FF00                	ANDI #$FF00,R1	; Remove exponent.
6226   03BB FF00                	ANDI #$FF00,R3	; Remove exponent.

6228   0007                     	SETC		; Restore bit one in mantissa
6229   0070                     	RRC R0,1
622A   0071                     	RRC R1,1
622B   0007                     	SETC		; Restore bit one in mantissa
622C   0072                     	RRC R2,1
622D   0073                     	RRC R3,1

622E   0084                     	MOVR R0,R4
622F   008D                     	MOVR R1,R5
6230   02B8 8000                	MVII #$8000,R0
6232   0240 0317                	MVO R0,fptemp1
6234   01C0                     	CLRR R0
6235   0240 0318                	MVO R0,fptemp2
6237   01C9                     	CLRR R1
6238   0154                     @@2:	CMPR R2,R4
6239   0209 000D                	BNC @@3
623B   020C 0003                	BNE @@4
623D   015D                     	CMPR R3,R5
623E   0209 0008                	BNC @@3
0x6240                          @@4:
                                	; It is bigger than the divisor.
6240   011D                     	SUBR R3,R5
6241   0014                     	DECR R4
6242   002C                     	ADCR R4
6243   0114                     	SUBR R2,R4
6244   02C0 0317                	ADD fptemp1,R0
6246   02C1 0318                	ADD fptemp2,R1
6248   0270                     @@3:	PSHR R0
6249   0006                     	CLRC
624A   0280 0317                	MVI fptemp1,R0
624C   0070                     	RRC R0,1
624D   0240 0317                	MVO R0,fptemp1
624F   0280 0318                	MVI fptemp2,R0
6251   0070                     	RRC R0,1
6252   0240 0318                	MVO R0,fptemp2
6254   02B0                     	PULR R0
6255   0006                     	CLRC
6256   0072                     	RRC R2,1
6257   0073                     	RRC R3,1
                                	; Again try to exit early
6258   00A4                     	TSTR R4
6259   020C 0003                	BNE @@5
625B   00AD                     	TSTR R5
625C   0204 0007                	BEQ @@6
0x625E                          @@5:
625E   0092                     	TSTR R2
625F   022C 0028                	BNE @@2
6261   037B 0040                	CMPI #$40,R3
6263   0221 002C                	BC @@2
0x6265                          @@6:
6265   02B5                     	PULR R5		; Restore exponent
                                	; Reuse the normalize code.
6266   0220 00BB                	B fpadd.11	; Normalize

                                	ENDP

                                	;
                                	; Floating-point comparison
                                	;
                                	; R0,R1 = Left operand
                                	; R2,R3 = Right operand
                                	;
                                	; Return flags for using BEQ, BNE, BC, and BNC.
                                	;
0x6268                          fpcomp:	PROC
6268   0275                     	PSHR R5
6269   008C                     	MOVR R1,R4
626A   03BC 00FF                	ANDI #$00FF,R4
626C   03FC 0080                	XORI #$0080,R4	; So negative sign is lesser.
626E   009D                     	MOVR R3,R5
626F   03BD 00FF                	ANDI #$00FF,R5
6271   03FD 0080                	XORI #$0080,R5	; So negative sign is lesser.
6273   016C                     	CMPR R5,R4
6274   020C 000E                	BNE @@1
6276   0007                     	SETC		; Restore bit one in mantissa
6277   0070                     	RRC R0,1
6278   0071                     	RRC R1,1
6279   0007                     	SETC		; Restore bit one in mantissa
627A   0072                     	RRC R2,1
627B   0073                     	RRC R3,1
627C   0150                     	CMPR R2,R0
627D   020C 0005                	BNE @@1
627F   03B9 FF80                	ANDI #$FF80,R1
6281   03BB FF80                	ANDI #$FF80,R3
6283   0159                     	CMPR R3,R1
0x6284                          @@1:
6284   02B7                     	PULR PC
                                	ENDP

                                	;
                                	; Convert integer to floating-point
                                	;
                                	; Input: R0 = Signed value.
                                	; Output: R0,R1 = Floating-point value.
                                	;
0x6285                          fpfromint:	PROC
6285   0275                     	PSHR R5
6286   0080                     	TSTR R0
6287   020C 0003                	BNE @@1
6289   01C9                     	CLRR R1
628A   0200 0013                	B @@2

628C   0203 0005                @@1:	BPL @@3
628E   02BA 0080                	MVII #$80,R2
6290   0020                     	NEGR R0
6291   0200 0001                	B @@4

6293   01D2                     @@3:	CLRR R2
0x6294                          @@4:
6294   0040                     	SWAP R0
6295   0081                     	MOVR R0,R1
6296   03B8 00FF                	ANDI #$00FF,R0
6298   03B9 FF00                	ANDI #$FF00,R1
629A   0272                     	PSHR R2
629B   02BD 0057                	MVII #FPEXP_BIAS+$18,R5
                                	; Reuse the normalize code.
629D   0220 00F2                	B fpadd.11	; Normalize

629F   02B7                     @@2:	PULR PC
                                	ENDP

                                	;
                                	; Convert unsigned integer to floating-point
                                	;
                                	; Input: R0 = unsigned value.
                                	; Output: R0,R1 = Floating-point value.
                                	;
0x62A0                          fpfromuint:	PROC
62A0   0275                     	PSHR R5
62A1   0080                     	TSTR R0
62A2   020C 0003                	BNE @@1
62A4   01C9                     	CLRR R1
62A5   0200 000C                	B @@2

62A7   01D2                     @@1:	CLRR R2
62A8   0040                     	SWAP R0
62A9   0081                     	MOVR R0,R1
62AA   03B8 00FF                	ANDI #$00FF,R0
62AC   03B9 FF00                	ANDI #$FF00,R1
62AE   0272                     	PSHR R2
62AF   02BD 0057                	MVII #FPEXP_BIAS+$18,R5
                                	; Reuse the normalize code.
62B1   0220 0106                	B fpadd.11	; Normalize

62B3   02B7                     @@2:	PULR PC
                                	ENDP

                                	;
                                	; Get integer part of a floating-point number
                                	; Round towards zero.
                                	;
                                	; R0,R1 = Floating-point value.
                                	;
0x62B4                          fpint:	PROC
62B4   0275                     	PSHR R5
62B5   008D                     	MOVR R1,R5
62B6   03BD 007F                	ANDI #$007F,R5
62B8   037D 0057                	CMPI #FPEXP_BIAS+$18,R5
62BA   0201 0016                 	BC @@2		; No fraction in this number.
62BC   01D2                     	CLRR R2
62BD   01DB                     	CLRR R3
62BE   033D 003F                	SUBI #FPEXP_BIAS,R5
62C0   0201 0004                	BC @@3		; Jump if there is an integer part.
62C2   01C0                     	CLRR R0		; Zero.
62C3   01C9                     	CLRR R1
62C4   0200 000C                	B @@2

62C6   0204 0006                @@3:	BEQ @@5		; Jump if no bits to shift.
62C8   0007                     @@4:	SETC
62C9   0072                     	RRC R2,1
62CA   0073                     	RRC R3,1
62CB   0015                     	DECR R5
62CC   022C 0005                	BNE @@4
62CE   02FB 00FF                @@5:	ADDI #$00FF,R3
62D0   0190                     	ANDR R2,R0
62D1   0199                     	ANDR R3,R1
62D2   02B7                     @@2:	PULR PC
                                	ENDP

                                	;
                                	; Get integer part of a floating-point number (ceil)
                                	;
0x62D3                          fpceil:	PROC
62D3   008B                     	MOVR R1,R3
62D4   03BB 0080                	ANDI #$80,R3	; Negative number?
62D6   022C 0023                	BNE fpint	; Yes, do it with fpint.
62D8   0200 0005                	B fpfloor.0
                                	ENDP

                                	;
                                	; Get integer part of a floating-point number (floor)
                                	;
                                	; R0,R1 = Floating-point value.
                                	;
0x62DA                          fpfloor:	PROC
62DA   008B                     	MOVR R1,R3
62DB   03BB 0080                	ANDI #$80,R3	; Positive number?
62DD   0224 002A                	BEQ fpint	; Yes, do it with fpint.
0x62DF                          @@0:
62DF   008C                     	MOVR R1,R4
62E0   03BC 007F                	ANDI #$007F,R4
62E2   037C 0057                	CMPI #FPEXP_BIAS+$18,R4
62E4   0201 003B                 	BC @@2		; No fraction in this number.
62E6   037C 003F                	CMPI #FPEXP_BIAS,R4
62E8   0201 0006                	BC @@3		; Jump if there is an integer part.
62EA   01C0                     	CLRR R0		; 
62EB   02B9 003F                	MVII #$003F,R1	; 1.0
62ED   00D9                     	ADDR R3,R1	; Add sign.
62EE   0200 0031                	B @@2

62F0   0275                     @@3:	PSHR R5
62F1   0273                     	PSHR R3
62F2   00A5                     	MOVR R4,R5
62F3   03B9 FF00                	ANDI #$FF00,R1	; Remove exponent
62F5   0007                     	SETC		; Restore bit one in mantissa
62F6   0070                     	RRC R0,1
62F7   0071                     	RRC R1,1
62F8   000D                     	INCR R5
62F9   02BA FFFF                	MVII #$FFFF,R2	; Mask for fraction.
62FB   0093                     	MOVR R2,R3
62FC   033C 003F                	SUBI #FPEXP_BIAS,R4
62FE   0006                     @@4:	CLRC
62FF   0072                     	RRC R2,1
6300   0073                     	RRC R3,1
6301   0014                     	DECR R4
6302   0223 0005                	BPL @@4
6304   03BB FF80                @@5: 	ANDI #$FF80,R3
6306   00D9                     	ADDR R3,R1	; Add fraction rounding.
6307   0028                     	ADCR R0
6308   0209 0006                	BNC @@6
630A   0070                     	RRC R0,1
630B   0071                     	RRC R1,1
630C   0006                     	CLRC
630D   0072                     	RRC R2,1
630E   0073                     	RRC R3,1
630F   000D                     	INCR R5		; Increase exponent.
6310   00D0                     @@6:	ADDR R2,R0
6311   0209 0006                	BNC @@7
6313   0070                     	RRC R0,1
6314   0071                     	RRC R1,1
6315   0006                     	CLRC
6316   0072                     	RRC R2,1
6317   0073                     	RRC R3,1
6318   000D                     	INCR R5
0x6319                          @@7:
6319   03BB FF80                	ANDI #$FF80,R3	; Now remove fraction.
631B   001A                     	COMR R2
631C   001B                     	COMR R3
631D   0190                     	ANDR R2,R0
631E   0199                     	ANDR R3,R1
                                	; Reuse the normalize code.
631F   0220 0174                	B fpadd.11	; Normalize

6321   00AF                     @@2:	MOVR R5,PC
                                	ENDP

                                	;
                                	; Convert a floating-point number to an integer.
                                	;
                                	; r0,r1 = Floating-point number
                                	;
                                	; Output: r0 = Integer.
                                	;
0x6322                          fp2int:	PROC
6322   0275                     	PSHR R5
6323   008D                     	MOVR R1,R5
6324   03BD 007F                	ANDI #$007F,R5
6326   0007                     	SETC
6327   0070                     	RRC R0,1
6328   02BA 004E                	MVII #FPEXP_BIAS+$0f,R2
632A   012A                     	SUBR R5,R2
632B   0204 0011                	BEQ @@2
632D   0203 0004                	BPL @@1
632F   02B8 7FFF                	MVII #$7FFF,R0	; Too big.
6331   0200 000B                	B @@2

6333   037A 0010                @@1:	CMPI #$10,R2
6335   0209 0003                	BNC @@4
6337   01C0                     	CLRR R0
6338   0200 0004                	B @@2

633A   0060                     @@4:	SLR R0,1
633B   0012                     	DECR R2
633C   022C 0003                	BNE @@4
633E   03B9 0080                @@2:	ANDI #$0080,R1
6340   0204 0001                	BEQ @@3
6342   0020                     	NEGR R0
6343   02B7                     @@3:	PULR PC
                                	ENDP

                                	;
                                	; Convert a floating-point number to an unsigned integer.
                                	;
                                	; r0,r1 = Floating-point number
                                	;
                                	; Output: r0 = Integer.
                                	;
0x6344                          fp2uint:	PROC
6344   0275                     	PSHR R5
6345   008D                     	MOVR R1,R5
6346   03BD 007F                	ANDI #$007F,R5
6348   0007                     	SETC
6349   0070                     	RRC R0,1
634A   02BA 004E                	MVII #FPEXP_BIAS+$0f,R2
634C   012A                     	SUBR R5,R2
634D   0204 0011                	BEQ @@2
634F   0203 0004                	BPL @@1
6351   02B8 7FFF                	MVII #$7FFF,R0	; Too big.
6353   0200 000B                	B @@2

6355   037A 0010                @@1:	CMPI #$10,R2
6357   0209 0003                	BNC @@4
6359   01C0                     	CLRR R0
635A   0200 0004                	B @@2

635C   0060                     @@4:	SLR R0,1
635D   0012                     	DECR R2
635E   022C 0003                	BNE @@4
6360   02B7                     @@2:	PULR PC
                                	ENDP

                                	;
                                	; Gets the absolute value of a floating-point number
                                	;
                                	; r0,r1 = Floating-point number
                                	;
0x6361                          fpabs:	PROC
6361   03B9 007F                	ANDI #$007F,R1
6363   00AF                     	MOVR R5,PC
                                	ENDP

                                	;
                                	; Negates a floating-point number
                                	;
                                	; r0,r1 = Floating-point number
                                	;
0x6364                          fpneg:	PROC
6364   03F9 0080                	XORI #$80,R1
6366   00AF                     	MOVR R5,PC
                                	ENDP

                                	;
                                	; Gets the sign of a floating-point number
                                	;
                                	; r0,r1 = Floating-point number.
                                	;
0x6367                          fpsgn:	PROC
6367   01C0                     	CLRR R0
6368   008A                     	MOVR R1,R2
6369   03BA 007F                	ANDI #$007F,R2
636B   020C 0002                	BNE @@1
636D   01C9                     	CLRR R1		; 0.0
636E   00AF                     	MOVR R5,PC
0x636F                          @@1:
636F   01C0                     	CLRR R0
6370   03B9 0080                	ANDI #$0080,R1
6372   020C 0003                	BNE @@2
6374   02B9 003F                	MVII #$003F,R1	; 1.0
6376   00AF                     	MOVR R5,PC

6377   02B9 00BF                @@2:	MVII #$00BF,R1	; -1.0
6379   00AF                     	MOVR R5,PC	
                                	ENDP

                                	;
                                	; Divide a number by 2 (moving the exponent)
                                	;
0x637A                          fpdivby2:	PROC
637A   0011                     	DECR R1
637B   008A                     	MOVR R1,R2
637C   03BA 007F                	ANDI #$7F,R2
637E   020C 0002                	BNE @@1
6380   01C0                     	CLRR R0
6381   01C9                     	CLRR R1
0x6382                          @@1:
6382   00AF                     	MOVR R5,PC
                                	ENDP

                                	;
                                	; Multiply a number by 2 (moving the exponent)
                                	;
0x6383                          fpmulby2:	PROC
6383   008A                     	MOVR R1,R2
6384   03BA 007F                	ANDI #$7F,R2
6386   037A 007F                	CMPI #$7F,R2
6388   020C 0006                	BNE @@1
638A   02B8 FFFF                	MVII #$FFFF,R0
638C   03B9 0080                	ANDI #$0080,R1
638E   02F9 FF7E                	ADDI #$FF7E,R1
6390   0009                     @@1:	INCR R1
6391   00AF                     	MOVR R5,PC
                                	ENDP

                                	;
                                	; Generate a random number
                                	; From my game Mecha Eight.
                                	;
0x6392                          fprnd:	PROC
6392   0275                     	PSHR R5
6393   0280 0346                	MVI lfsr,r0
6395   0080                     	TSTR R0
6396   020C 0002                	BNE @@1
6398   02B8 7811                	MVII #$7811,R0
639A   0082                     @@1:	MOVR R0,R2
639B   03BA 8000                	ANDI #$8000,R2
639D   0081                     	MOVR R0,R1
639E   03B9 0020                	ANDI #$0020,R1
63A0   0204 0002                	BEQ @@3
63A2   03FA 8000                	XORI #$8000,R2
63A4   0081                     @@3:	MOVR R0,R1
63A5   03B9 0100                	ANDI #$0100,R1
63A7   0204 0002                	BEQ @@4
63A9   03FA 8000                	XORI #$8000,R2
63AB   0081                     @@4:	MOVR R0,R1
63AC   03B9 0004                	ANDI #$0004,R1
63AE   0204 0002                	BEQ @@5
63B0   03FA 8000                	XORI #$8000,R2
63B2   0052                     @@5:	RLC R2,1
63B3   0070                     	RRC R0,1
63B4   0240 0346                	MVO R0,lfsr
63B6   01C9                     	CLRR R1
63B7   0271                     	PSHR R1
63B8   02BD 003F                	MVII #$3F,R5
                                	; Reuse the normalize code.
63BA   0220 020F                	B fpadd.11	; Normalize
                                	ENDP
                                	INCLUDE "fpio.asm"
                                	;
                                	; Floating-point string routines
                                	;
                                	; by Oscar Toledo G.
                                	; https://nanochess.org/
                                	;
                                	; Creation date: Sep/23/2025.
                                	; Revision date: Sep/24/2025. Now it handles zero.
                                	;

                                	;
                                	; Print a floating-point number.
                                	;
0x63BC                          fpprint:	PROC
63BC   0275                     	PSHR R5
63BD   008A                     	MOVR R1,R2
63BE   03BA 007F                	ANDI #$7F,R2	; Special case: Is it zero?
63C0   020C 000B                	BNE @@14
63C2   02B8 0020                	MVII #$20,R0
63C4   0004 015C 02C6           	CALL bas_output
63C7   02B8 0030                	MVII #$30,R0
63C9   0004 015C 02C6           	CALL bas_output
63CC   02B7                     	PULR PC
0x63CD                          @@14:
63CD   008A                     	MOVR R1,R2
63CE   02BB 0020                	MVII #$20,R3
63D0   03BA 0080                	ANDI #$80,R2
63D2   0204 0004                	BEQ @@7
63D4   03B9 FF7F                	ANDI #$FF7F,R1	; Make it positive
63D6   02BB 002D                	MVII #$2D,R3
63D8   0270                     @@7:	PSHR R0
63D9   0271                     	PSHR R1
63DA   0098                     	MOVR R3,R0
63DB   0004 015C 02C6           	CALL bas_output
63DE   02B1                     	PULR R1
63DF   02B0                     	PULR R0
63E0   0270                     	PSHR R0
63E1   0271                     	PSHR R1
63E2   02BA 312D                	MVII #$312D,R2	; Biggest integer in 24-bit
63E4   02BB 0056                	MVII #$0056,R3	; 10,000,000
63E6   0004 0160 0268           	CALL fpcomp
63E9   0201 00CC                	BC @@1
63EB   02B1                     	PULR R1
63EC   02B0                     	PULR R0
63ED   0270                     	PSHR R0
63EE   0271                     	PSHR R1
63EF   02BA 47AE                	MVII #$47AE,R2
63F1   02BB 1438                	MVII #$1438,R3	; 0.01
63F3   0004 0160 0268           	CALL fpcomp
63F6   0209 008D                	BNC @@2
63F8   02B1                     	PULR R1
63F9   02B0                     	PULR R0
63FA   0270                     	PSHR R0
63FB   0271                     	PSHR R1		; Save original number.
63FC   0004 0160 02B4           	CALL fpint
63FF   0270                     	PSHR R0
6400   0271                     	PSHR R1		; Save integer part.
6401   008A                     	MOVR R1,R2
6402   03BA 007F                	ANDI #$7F,R2
6404   0007                     	SETC
6405   0070                     	RRC R0,1
6406   0071                     	RRC R1,1
6407   02BB 005E                	MVII #$5E,R3
6409   0113                     	SUBR R2,R3
640A   0204 0006                	BEQ @@5
640C   0006                     @@6:	CLRC
640D   0070                     	RRC R0,1
640E   0071                     	RRC R1,1
640F   0013                     	DECR R3
6410   022C 0005                	BNE @@6
6412   01E4                     @@5:	CLRR R4
6413   02BA 000F                	MVII #$000F,R2
6415   02BB 4240                	MVII #$4240,R3	; 1,000,000
6417   0004 0164 0132           	CALL @@digit
641A   02BA 0001                	MVII #$0001,R2
641C   02BB 86A0                	MVII #$86a0,R3	; 100,000
641E   0004 0164 0132           	CALL @@digit
6421   01D2                     	CLRR R2
6422   02BB 2710                	MVII #$2710,R3	; 10,000
6424   0004 0164 0132           	CALL @@digit
6427   02BB 03E8                	MVII #$03e8,R3	; 1,000
6429   0004 0164 0132           	CALL @@digit
642C   02BB 0064                	MVII #$0064,R3	; 100
642E   0004 0164 0132           	CALL @@digit
6431   02BB 000A                	MVII #$000a,R3	; 10
6433   0004 0164 0132           	CALL @@digit
6436   000C                     	INCR R4
6437   02BB 0001                	MVII #$0001,R3	; 1
6439   0004 0164 0132           	CALL @@digit
643C   02B3                     	PULR R3
643D   02B2                     	PULR R2
643E   02B1                     	PULR R1
643F   02B0                     	PULR R0
6440   0004 0160 014D           	CALL fpsub	; Subtract integer part from original number
6443   008A                     	MOVR R1,R2
6444   03BA 007F                	ANDI #$7F,R2
6446   0204 00A0                	BEQ @@0		; Jump if no fraction.
6448   0007                     	SETC
6449   0070                     	RRC R0,1
644A   0071                     	RRC R1,1
644B   037A 003E                	CMPI #$3e,R2
644D   0204 0008                	BEQ @@3
0x644F                          @@4:
644F   0006                     	CLRC
6450   0070                     	RRC R0,1
6451   0071                     	RRC R1,1
6452   000A                     	INCR R2
6453   037A 003E                	CMPI #$3e,R2
6455   022C 0007                	BNE @@4
0x6457                          @@3:
6457   0040                     	SWAP R0
6458   03B8 00FF                	ANDI #$00FF,R0
645A   0081                     	MOVR R0,R1
645B   00C0                     	ADDR R0,R0	; x2
645C   00C0                     	ADDR R0,R0	; x4
645D   00C8                     	ADDR R1,R0	; x5
645E   0081                     	MOVR R0,R1
645F   00C0                     	ADDR R0,R0	; x10
6460   00C0                     	ADDR R0,R0	; x20
6461   00C8                     	ADDR R1,R0	; x25
6462   00C0                     	ADDR R0,R0	; x50
6463   00C0                     	ADDR R0,R0	; x100

6464   02F8 0080                	ADDI #$80,R0	; Rounding.
6466   0040                     	SWAP R0
6467   03B8 00FF                	ANDI #$FF,R0	; /256.
6469   0204 007D                	BEQ @@0
646B   0378 0064                	CMPI #100,R0	; Cannot round to 100, go back to 99.
646D   020C 0001                	BNE @@8
646F   0010                     	DECR R0
0x6470                          @@8:
6470   0270                     	PSHR R0
6471   02B8 002E                	MVII #$2E,R0
6473   0004 015C 02C6           	CALL bas_output
6476   02B1                     	PULR R1
6477   01C0                     	CLRR R0
6478   01D2                     	CLRR R2
6479   02BB 000A                	MVII #$000a,R3	; 10
647B   009C                     	MOVR R3,R4
647C   0004 0164 0132           	CALL @@digit
647F   02BB 0001                	MVII #$0001,R3	; 1
6481   0004 0164 0132           	CALL @@digit
6484   02B7                     	PULR PC

                                	; Lesser than 0.01
0x6485                          @@2:
6485   02B1                     	PULR R1
6486   02B0                     	PULR R0
6487   02BC FFFA                	MVII #-6,R4
6489   0274                     	PSHR R4
648A   0270                     	PSHR R0
648B   0271                     	PSHR R1
0x648C                          @@9:
648C   02B1                     	PULR R1
648D   02B0                     	PULR R0
648E   02B4                     	PULR R4
648F   000C                     	INCR R4		; Exponent
6490   0274                     	PSHR R4
6491   02BA 4000                	MVII #$4000,R2
6493   02BB 0042                	MVII #$0042,R3	; 10.0
6495   0004 0160 01DA           	CALL fpmul
6498   0270                     	PSHR R0
6499   0271                     	PSHR R1
649A   02BA E848                	MVII #$E848,R2
649C   02BB 0052                	MVII #$0052,R3	; 1,000,000
649E   0004 0160 0268           	CALL fpcomp
64A1   0229 0016                	BNC @@9	
64A3   02B1                     	PULR R1
64A4   02B0                     	PULR R0
64A5   0004 0164 00E9           	CALL @@exponent
64A8   02B8 0045                	MVII #$45,R0
64AA   0004 015C 02C6           	CALL bas_output
64AD   02B8 002D                	MVII #$2D,R0
64AF   0004 015C 02C6           	CALL bas_output
64B2   02B0                     	PULR R0
64B3   0004 0160 005F           	CALL PRNUM16.l
64B6   02B7                     	PULR PC

                                	; Bigger than 10,000,000
0x64B7                          @@1:
64B7   02B1                     	PULR R1
64B8   02B0                     	PULR R0
64B9   02BC 0006                	MVII #6,R4
64BB   0274                     	PSHR R4
64BC   0270                     	PSHR R0
64BD   0271                     	PSHR R1
0x64BE                          @@10:
64BE   02B1                     	PULR R1
64BF   02B0                     	PULR R0
64C0   02B4                     	PULR R4
64C1   000C                     	INCR R4		; Exponent
64C2   0274                     	PSHR R4
64C3   02BA 4000                	MVII #$4000,R2
64C5   02BB 0042                	MVII #$0042,R3	; 10.0
64C7   0004 0160 0212           	CALL fpdiv
64CA   0270                     	PSHR R0
64CB   0271                     	PSHR R1
64CC   02BA 312D                	MVII #$312D,R2
64CE   02BB 0056                	MVII #$0056,R3	; 10,000,000
64D0   0004 0160 0268           	CALL fpcomp
64D3   0221 0016                	BC @@10
64D5   02B1                     	PULR R1
64D6   02B0                     	PULR R0
64D7   0004 0164 00E9           	CALL @@exponent
64DA   02B8 0045                	MVII #$45,R0
64DC   0004 015C 02C6           	CALL bas_output
64DF   02B8 002B                	MVII #$2b,R0
64E1   0004 015C 02C6           	CALL bas_output
64E4   02B0                     	PULR R0
64E5   0004 0160 005F           	CALL PRNUM16.l
0x64E8                          @@0:
64E8   02B7                     	PULR PC

0x64E9                          @@exponent:
64E9   0275                     	PSHR R5
64EA   0004 0160 02B4           	CALL fpint
64ED   008A                     	MOVR R1,R2
64EE   03BA 007F                	ANDI #$7F,R2
64F0   0007                     	SETC
64F1   0070                     	RRC R0,1
64F2   0071                     	RRC R1,1
64F3   02BB 005E                	MVII #$5E,R3
64F5   0113                     	SUBR R2,R3
64F6   0204 0006                	BEQ @@11
64F8   0006                     @@12:	CLRC
64F9   0070                     	RRC R0,1
64FA   0071                     	RRC R1,1
64FB   0013                     	DECR R3
64FC   022C 0005                	BNE @@12
0x64FE                          @@11:	
64FE   02BA 000F                	MVII #$000F,R2
6500   02BB 4240                	MVII #$4240,R3	; 1,000,000
6502   0094                     	MOVR R2,R4
6503   0004 0164 0132           	CALL @@digit
6506   0270                     	PSHR R0
6507   0271                     	PSHR R1
6508   02B8 002E                	MVII #$2E,R0
650A   0004 015C 02C6           	CALL bas_output
650D   02B1                     	PULR R1
650E   02B0                     	PULR R0
650F   02BA 0001                	MVII #$0001,R2
6511   0094                     	MOVR R2,R4
6512   02BB 86A0                	MVII #$86a0,R3	; 100,000
6514   0004 0164 0132           	CALL @@digit
6517   01D2                     	CLRR R2
6518   02BB 2710                	MVII #$2710,R3	; 10,000
651A   0004 0164 0132           	CALL @@digit
651D   02BB 03E8                	MVII #$03e8,R3	; 1,000
651F   0004 0164 0132           	CALL @@digit
6522   02BB 0064                	MVII #$0064,R3	; 100
6524   0004 0164 0132           	CALL @@digit
6527   02BB 000A                	MVII #$000a,R3	; 10
6529   0004 0164 0132           	CALL @@digit
652C   02BB 0001                	MVII #$0001,R3	; 1
652E   0004 0164 0132           	CALL @@digit
6531   02B7                     	PULR PC

0x6532                          @@digit:
6532   0275                     	PSHR R5
6533   02BD 002F                	MVII #$2F,R5
6535   000D                     @@d1:	INCR R5
6536   0119                     	SUBR R3,R1
6537   0010                     	DECR R0
6538   0028                     	ADCR R0
6539   0110                     	SUBR R2,R0
653A   0223 0006                	BPL @@d1
653C   00D9                     	ADDR R3,R1
653D   0028                     	ADCR R0
653E   00D0                     	ADDR R2,R0
653F   037D 0030                	CMPI #$30,R5
6541   020C 0003                	BNE @@d2
6543   00A4                     	TSTR R4
6544   0204 000F                	BEQ @@d3
6546   000C                     @@d2:	INCR R4
6547   0270                     	PSHR R0
6548   0271                     	PSHR R1
6549   0272                     	PSHR R2
654A   0273                     	PSHR R3
654B   0274                     	PSHR R4
654C   00A8                     	MOVR R5,R0
654D   0004 015C 02C6           	CALL bas_output
6550   02B4                     	PULR R4
6551   02B3                     	PULR R3
6552   02B2                     	PULR R2
6553   02B1                     	PULR R1
6554   02B0                     	PULR R0
6555   02B7                     @@d3:	PULR PC
                                	ENDP

0x319                           	ORG $319,$319,"-RWB"
0x319                           _frame:	 RMB 1   ; Current frame
0x31A                           _col0:      RMB 1       ; Collision status for MOB0
0x31B                           _col1:      RMB 1       ; Collision status for MOB1
0x31C                           _col2:      RMB 1       ; Collision status for MOB2
0x31D                           _col3:      RMB 1       ; Collision status for MOB3
0x31E                           _col4:      RMB 1       ; Collision status for MOB4
0x31F                           _col5:      RMB 1       ; Collision status for MOB5
0x320                           _col6:      RMB 1       ; Collision status for MOB6
0x321                           _col7:      RMB 1       ; Collision status for MOB7
0x322                           _mobs:	RMB 24
0x33A                           bas_firstpos:	RMB 1	; First position of cursor.
0x33B                           bas_ttypos:	RMB 1	; Current position on screen.
0x33C                           bas_curcolor:	RMB 1	; Current color.
0x33D                           bas_card:	RMB 1	; Card under the cursor.
0x33E                           bas_curline:	RMB 1	; Current line in execution (0 for direct command)
0x33F                           bas_forptr:	RMB 1	; Stack for FOR loops.
0x340                           bas_gosubptr:	RMB 1	; Stack for GOSUB/RETURN.
0x341                           bas_dataptr:	RMB 1	; Pointer for DATA.
0x342                           bas_arrays:	RMB 1	; Pointer to where arrays start.
0x343                           bas_last_array:	RMB 1	; Pointer to end of array list.
0x344                           bas_memlimit:	RMB 1	; Mmemory limit.
0x345                           program_end:	RMB 1	; Pointer to program's end.
0x346                           lfsr:		RMB 1	; Random number
0x347                           _mode_color:	RMB 1	; Colors for Color Stack mode.
0x348                           _gram_bitmap:	RMB 1	; Pointer to bitmap for GRAM.

0x100                           SCRATCH:    ORG $100,$100,"-RWBN"
                                	;
                                	; 8-bits variables
                                	;
0x100                           ISRVEC:     RMB 2       ; Pointer to ISR vector (required by Intellivision ROM)
0x102                           _int:       RMB 1       ; Signals interrupt received
0x103                           _ntsc:      RMB 1       ; bit 0 = 1=NTSC, 0=PAL. Bit 1 = 1=ECS detected.
0x104                           _mode:	RMB 1	; Video mode setup.
0x105                           _border_color:  RMB 1   ; Border color
0x106                           _border_mask:   RMB 1   ; Border mask
0x107                           _gram_target:	RMB 1	; Target GRAM card.
0x108                           _gram_total:	RMB 1	; Total of GRAM cards.
0x109                           _debounce:	RMB 1	; Keyboard debounce.
0x10A                           ECS_KEY_LAST:	RMB 1	; ECS last key pressed.
0x10B                           temp1:		RMB 1	; Temporary value.
 ERROR SUMMARY - ERRORS DETECTED 0
               -  WARNINGS       0
